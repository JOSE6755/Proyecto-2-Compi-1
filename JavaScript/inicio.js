/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var inicio = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,10],$V2=[1,11],$V3=[1,28],$V4=[1,20],$V5=[1,19],$V6=[1,26],$V7=[1,27],$V8=[1,21],$V9=[1,22],$Va=[1,23],$Vb=[1,24],$Vc=[1,25],$Vd=[1,29],$Ve=[1,30],$Vf=[1,31],$Vg=[1,32],$Vh=[1,33],$Vi=[5,7,16,17,24,26,33,34,39,40,47,49,53,54,55,57,58,59,60,61],$Vj=[1,45],$Vk=[1,47],$Vl=[1,49],$Vm=[1,50],$Vn=[1,52],$Vo=[1,53],$Vp=[1,58],$Vq=[1,66],$Vr=[1,72],$Vs=[1,65],$Vt=[1,64],$Vu=[1,67],$Vv=[1,68],$Vw=[1,69],$Vx=[1,70],$Vy=[1,71],$Vz=[1,73],$VA=[1,74],$VB=[1,75],$VC=[1,76],$VD=[1,77],$VE=[1,78],$VF=[1,79],$VG=[1,80],$VH=[10,26,28,36],$VI=[2,20],$VJ=[1,82],$VK=[1,116],$VL=[1,117],$VM=[1,109],$VN=[1,108],$VO=[1,110],$VP=[1,111],$VQ=[1,112],$VR=[1,113],$VS=[1,114],$VT=[1,115],$VU=[1,118],$VV=[1,119],$VW=[1,120],$VX=[1,121],$VY=[10,11,29,31,33,35,36,41,45,46,62,63,64,65,66,67,68,69,70,71],$VZ=[1,146],$V_=[10,33,41],$V$=[10,11],$V01=[5,7,16,17,24,26,33,34,39,40,47,48,49,51,52,53,54,55,57,58,59,60,61],$V11=[10,11,29,31,33,41,70,71],$V21=[1,191],$V31=[10,11,29,31,33,35,36,41,45,46,66,67,68,69,70,71],$V41=[10,11,29,31,33,35,36,41,45,46,62,63,64,66,67,68,69,70,71],$V51=[10,11,29,31,33,41,66,67,70,71],$V61=[10,11,29,31,33,35,36,41,66,67,68,69,70,71],$V71=[10,41],$V81=[1,247],$V91=[33,51,52];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"LINS":4,"EOF":5,"INS":6,"IMPRIMIR":7,"PARABRE":8,"EXP":9,"PARCIERRA":10,"PTCOMA":11,"CREAR":12,"ASIGNAR":13,"IF":14,"SWITCH":15,"RBREAK":16,"RCONTINUAR":17,"MIENTRAS":18,"MIENTRAS2":19,"DESDE":20,"FUNCION":21,"LLAMAR":22,"RETORNAR":23,"RRETURN":24,"TIPO":25,"ID":26,"IGUAL":27,"CORABRE":28,"CORCIERRA":29,"NUEVO":30,"LABRE":31,"LISTAEXP":32,"LCIERRA":33,"RLISTITA":34,"MENOR":35,"MAYOR":36,"AREA":37,"PARAMS":38,"RVOID":39,"REXEC":40,"COMITA":41,"CAMBIAR":42,"RPUNTO":43,"RADD":44,"MENOS":45,"MAS":46,"Rif":47,"Relse":48,"RSWITCH":49,"LCASES":50,"RDEFAULT":51,"RCASE":52,"RWHILE":53,"RDO":54,"RFOR":55,"INCREMENTO":56,"int":57,"Double":58,"Boolean":59,"String":60,"Char":61,"POR":62,"DIV":63,"MODULO":64,"RELEVAR":65,"IGUALACION":66,"DIFERENTE":67,"MENORIG":68,"MAYORIG":69,"AND":70,"OR":71,"NOT":72,"TRUE":73,"FALSE":74,"Cadena":75,"DECIMAL":76,"NUMERO":77,"RCHAR":78,"RTOUPPER":79,"RTOLOWER":80,"RTOSTRING":81,"RROUND":82,"RTRUNCATE":83,"RTYPE":84,"RLENGTH":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"IMPRIMIR",8:"PARABRE",10:"PARCIERRA",11:"PTCOMA",16:"RBREAK",17:"RCONTINUAR",24:"RRETURN",26:"ID",27:"IGUAL",28:"CORABRE",29:"CORCIERRA",30:"NUEVO",31:"LABRE",33:"LCIERRA",34:"RLISTITA",35:"MENOR",36:"MAYOR",39:"RVOID",40:"REXEC",41:"COMITA",43:"RPUNTO",44:"RADD",45:"MENOS",46:"MAS",47:"Rif",48:"Relse",49:"RSWITCH",51:"RDEFAULT",52:"RCASE",53:"RWHILE",54:"RDO",55:"RFOR",57:"int",58:"Double",59:"Boolean",60:"String",61:"Char",62:"POR",63:"DIV",64:"MODULO",65:"RELEVAR",66:"IGUALACION",67:"DIFERENTE",68:"MENORIG",69:"MAYORIG",70:"AND",71:"OR",72:"NOT",73:"TRUE",74:"FALSE",75:"Cadena",76:"DECIMAL",77:"NUMERO",78:"RCHAR",79:"RTOUPPER",80:"RTOLOWER",81:"RTOSTRING",82:"RROUND",83:"RTRUNCATE",84:"RTYPE",85:"RLENGTH"},
productions_: [0,[3,2],[3,2],[4,2],[4,1],[6,5],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,1],[6,2],[6,1],[6,1],[6,2],[6,1],[23,3],[23,2],[12,2],[12,4],[12,10],[12,8],[12,11],[21,5],[21,6],[21,6],[21,5],[22,3],[22,4],[22,5],[22,4],[38,4],[38,2],[13,3],[13,2],[13,6],[13,6],[13,8],[42,2],[42,2],[14,5],[14,7],[14,7],[15,7],[15,9],[50,4],[50,3],[37,3],[37,2],[18,5],[19,6],[20,9],[20,9],[56,2],[56,3],[25,1],[25,1],[25,1],[25,1],[25,1],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,2],[9,3],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,3],[9,4],[9,4],[9,4],[9,4],[9,4],[9,4],[9,4],[9,4],[9,4],[9,4],[9,6],[32,3],[32,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log(JSON.stringify($$[$0-1],null,2)); console.log(consolita); EjectBloque($$[$0-1],Global); return{consola:consolita,arbol:JSON.stringify($$[$0-1],null,2),error:errores};
break;
case 2:
console.log("Sintactico","Error en : '"+yytext+"'",this._$.first_line,this._$.first_column);
break;
case 3:
this.$=$$[$0-1]; this.$.push($$[$0]);
break;
case 4:
this.$=[]; this.$.push($$[$0]);
break;
case 5:
this.$=Imprimir($$[$0-2],"imprimir");
break;
case 6: case 16: case 49:
this.$=$$[$0-1];
break;
case 7: case 13: case 40: case 41: case 80:
this.$=$$[$0-1]
break;
case 8: case 9: case 12: case 14: case 57: case 58: case 59: case 60: case 61:
this.$=$$[$0]
break;
case 10:
this.$=ROMPER()
break;
case 11:
this.$=Continue()
break;
case 15:
this.$=$$[$0];
break;
case 18:
this.$=RETORNAR($$[$0-1])
break;
case 19:
this.$=RETORNAR(NuevoSimbolo("@vacio@","vacio"))
break;
case 20:
this.$=Creacion($$[$0],$$[$0-1],null,null,null);
break;
case 21:
this.$=Creacion($$[$0-2],$$[$0-3],$$[$0],null,null);
break;
case 22:
this.$=Creacion($$[$0-6],$$[$0-9],null,$$[$0-3],$$[$0-1])
break;
case 23:
this.$=Creacion($$[$0-4],$$[$0-7],$$[$0-1],$$[$0-7],null)
break;
case 24:
this.$=Creacion($$[$0-6],$$[$0-8],null,$$[$0-1],null)
break;
case 25:
this.$=FUNCIONAR($$[$0-3],[],$$[$0-4],$$[$0])
break;
case 26:
this.$=FUNCIONAR($$[$0-4],$$[$0-2],$$[$0-5],$$[$0])
break;
case 27:
this.$=FUNCIONAR($$[$0-4],$$[$0-2],"void",$$[$0])
break;
case 28:
this.$=FUNCIONAR($$[$0-3],[],"void",$$[$0])
break;
case 29: case 32:
this.$=LLAMADA($$[$0-2],[])
break;
case 30: case 31:
this.$=LLAMADA($$[$0-3],$$[$0-1])
break;
case 33:
this.$=$$[$0-3];this.$.push(Creacion($$[$0],$$[$0-1],null))
break;
case 34:
this.$=[];this.$.push(Creacion($$[$0],$$[$0-1],null))
break;
case 35:
this.$=Asign($$[$0-2],$$[$0],null)
break;
case 36:
this.$=Asign($$[$0-1],NuevaOp(NuevoSimbolo($$[$0-1],"ID"),NuevoSimbolo(parseFloat(1),"int"),$$[$0]))
break;
case 37:
this.$=Asign($$[$0-5],$$[$0],$$[$0-3])
break;
case 38:
this.$=Asign($$[$0-5],$$[$0-1],NuevoSimbolo("nada","list"))
break;
case 39:
this.$=Asign($$[$0-7],$$[$0],NuevaOp($$[$0-4],NuevoSimbolo(1,"int"),"+"))
break;
case 42:
this.$=SI($$[$0-2],$$[$0],null);
break;
case 43:
this.$=SI($$[$0-4],$$[$0-2],$$[$0]);
break;
case 45:
this.$=SWITCHI($$[$0-4],$$[$0-1],null);
break;
case 46:
this.$=SWITCHI($$[$0-6],$$[$0-3],$$[$0-1]);
break;
case 47:
this.$=$$[$0-3]; this.$.push(Cases($$[$0-1],$$[$0]));
break;
case 48:
this.$=[]; this.$.push(Cases($$[$0-1],$$[$0]));
break;
case 50:
this.$=[];
break;
case 51:
this.$=WHILES($$[$0-2],$$[$0])
break;
case 52:
this.$=WHILES2($$[$0-1],$$[$0-4])
break;
case 53: case 54:
this.$=FORES($$[$0-6],$$[$0-4],$$[$0-2],$$[$0])
break;
case 55:
this.$=Incrementos($$[$0-1],NuevaOp(NuevoSimbolo($$[$0-1],"ID"),NuevoSimbolo(parseFloat(1),"int"),$$[$0]))
break;
case 56:
this.$=Incrementos($$[$0-2],$$[$0])
break;
case 62:
this.$=NuevaOp($$[$0-2],$$[$0],"+");
break;
case 63:
this.$=NuevaOp($$[$0-2],$$[$0],"-");
break;
case 64:
this.$=NuevaOp($$[$0-2],$$[$0],"*");
break;
case 65:
this.$=NuevaOp($$[$0-2],$$[$0],"/");
break;
case 66:
this.$=NuevaOp($$[$0-2],$$[$0],"%");
break;
case 67:
this.$=NuevaOp($$[$0-2],$$[$0],"^")
break;
case 68:
this.$=NuevaOp($$[$0-2],$$[$0],"==");
break;
case 69:
this.$=NuevaOp($$[$0-2],$$[$0],"!=");
break;
case 70:
this.$=NuevaOp($$[$0-2],$$[$0],"<");
break;
case 71:
this.$=NuevaOp($$[$0-2],$$[$0],">");
break;
case 72:
this.$=NuevaOp($$[$0-2],$$[$0],"<=");
break;
case 73:
this.$=NuevaOp($$[$0-2],$$[$0],">=");
break;
case 74:
this.$=NuevaOp($$[$0-2],$$[$0],"and");
break;
case 75:
this.$=NuevaOp($$[$0-2],$$[$0],"or");
break;
case 76:
this.$=NuevaOp($$[$0-2],NuevoSimbolo(parseFloat(1),"int"),"-")
break;
case 77:
this.$=NuevaOp($$[$0-2],NuevoSimbolo(parseFloat(1),"int"),"+")
break;
case 78:
this.$=OperaUna($$[$0],"not");
break;
case 79:
this.$=OperaUna($$[$0],"umenos");
break;
case 81:
this.$=NuevoSimbolo(true,"bool");
break;
case 82:
this.$=NuevoSimbolo(false,"bool");
break;
case 83:
this.$=NuevoSimbolo($$[$0],"String");
break;
case 84:
this.$=NuevoSimbolo($$[$0],"double");
break;
case 85:
this.$=NuevoSimbolo($$[$0],"int");
break;
case 86:
this.$=NuevoSimbolo($$[$0],"ID");
break;
case 87:
this.$=NuevoSimbolo($$[$0],"char");
break;
case 88:
this.$=NuevoSimbolo({Exp:$$[$0-2],Param:[]},"funcion")
break;
case 89:
this.$=NuevoSimbolo({Exp:$$[$0-3],Param:$$[$0-1] },"funcion")
break;
case 90:
this.$=NuevoSimbolo({Exp:$$[$0],Tipo:$$[$0-2]},"cambio")
break;
case 91:
this.$=NuevoSimbolo(null,"mayus",$$[$0-1],"upper")
break;
case 92:
this.$=NuevoSimbolo(null,"mayus",$$[$0-1],"lower")
break;
case 93:
this.$=NuevoSimbolo(null,"mayus",$$[$0-1],"String")
break;
case 94:
this.$=NuevoSimbolo(null,"redondeos",$$[$0-1],"round")
break;
case 95:
this.$=NuevoSimbolo(null,"redondeos",$$[$0-1],"truncate")
break;
case 96:
this.$=NuevoSimbolo(null,"mayus",$$[$0-1],"typeof")
break;
case 97:
this.$=NuevoSimbolo(null,"mayus",$$[$0-1],"length")
break;
case 98:
this.$=NuevoSimbolo(null,"array",$$[$0-3],$$[$0-1])
break;
case 99:
this.$=NuevoSimbolo(null,"list",$$[$0-5],$$[$0-2])
break;
case 100:
this.$=$$[$0-2];this.$.push($$[$0])
break;
case 101:
this.$=[];this.$.push($$[$0])
break;
}
},
table: [{2:[1,3],3:1,4:2,6:4,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:$V2,18:12,19:13,20:14,21:15,22:16,23:17,24:$V3,25:18,26:$V4,34:$V5,39:$V6,40:$V7,47:$V8,49:$V9,53:$Va,54:$Vb,55:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh},{1:[3]},{5:[1,34],6:35,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:$V2,18:12,19:13,20:14,21:15,22:16,23:17,24:$V3,25:18,26:$V4,34:$V5,39:$V6,40:$V7,47:$V8,49:$V9,53:$Va,54:$Vb,55:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh},{5:[1,36]},o($Vi,[2,4]),{8:[1,37]},{11:[1,38]},{11:[1,39]},o($Vi,[2,8]),o($Vi,[2,9]),{11:[1,40]},{11:[1,41]},o($Vi,[2,12]),{11:[1,42]},o($Vi,[2,14]),o($Vi,[2,15]),{11:[1,43]},o($Vi,[2,17]),{26:[1,44],28:$Vj},{35:[1,46]},{8:[1,51],27:$Vk,28:$Vl,42:48,43:$Vm,45:$Vn,46:$Vo},{8:[1,54]},{8:[1,55]},{8:[1,56]},{31:$Vp,37:57},{8:[1,59]},{26:[1,60]},{26:[1,61]},{8:$Vq,9:62,11:[1,63],26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},o($VH,[2,57]),o($VH,[2,58]),o($VH,[2,59]),o($VH,[2,60]),o($VH,[2,61]),{1:[2,1]},o($Vi,[2,3]),{1:[2,2]},{8:$Vq,9:81,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,13]),o($Vi,[2,16]),{8:[1,83],11:$VI,27:$VJ},{29:[1,84]},{25:85,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh},{8:$Vq,9:86,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{11:[2,36]},{8:$Vq,9:87,26:$Vr,28:[1,88],45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{44:[1,89]},{8:$Vq,9:92,10:[1,90],26:$Vr,32:91,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{45:[1,93]},{46:[1,94]},{8:$Vq,9:95,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{8:$Vq,9:96,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{8:$Vq,9:97,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{53:[1,98]},{4:99,6:4,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:$V2,18:12,19:13,20:14,21:15,22:16,23:17,24:$V3,25:18,26:$V4,33:[1,100],34:$V5,39:$V6,40:$V7,47:$V8,49:$V9,53:$Va,54:$Vb,55:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh},{12:101,13:102,25:103,26:[1,104],34:$V5,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh},{8:[1,105]},{8:[1,106]},{11:[1,107],35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},o($Vi,[2,19]),{8:$Vq,9:122,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{8:$Vq,9:123,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{8:$Vq,9:124,25:125,26:$Vr,45:$Vs,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},o($VY,[2,81]),o($VY,[2,82]),o($VY,[2,83]),o($VY,[2,84]),o($VY,[2,85]),o($VY,[2,86],{8:[1,126],28:[1,127]}),o($VY,[2,87]),{8:[1,128]},{8:[1,129]},{8:[1,130]},{8:[1,131]},{8:[1,132]},{8:[1,133]},{8:[1,134]},{10:[1,135],35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},{8:$Vq,9:136,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{10:[1,137],25:139,38:138,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh},{26:[1,140]},{36:[1,141]},{11:[2,35],35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},{29:[1,142],35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},{8:$Vq,9:143,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{8:[1,144]},{11:[2,29]},{10:[1,145],41:$VZ},o($V_,[2,101],{35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX}),o($V$,[2,40]),o($V$,[2,41]),{10:[1,147],35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},{10:[1,148],35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},{10:[1,149],35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},{8:[1,150]},{6:35,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:$V2,18:12,19:13,20:14,21:15,22:16,23:17,24:$V3,25:18,26:$V4,33:[1,151],34:$V5,39:$V6,40:$V7,47:$V8,49:$V9,53:$Va,54:$Vb,55:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh},o($V01,[2,50]),{11:[1,152]},{11:[1,153]},{26:[1,154],28:$Vj},{27:$Vk,28:$Vl,42:48,43:$Vm,45:$Vn,46:$Vo},{10:[1,156],25:139,38:155,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh},{8:$Vq,9:92,10:[1,158],26:$Vr,32:157,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},o($Vi,[2,18]),{8:$Vq,9:159,26:$Vr,45:$Vs,46:[1,160],72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{8:$Vq,9:161,26:$Vr,45:[1,162],72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{8:$Vq,9:163,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{8:$Vq,9:164,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{8:$Vq,9:165,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{8:$Vq,9:166,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{8:$Vq,9:167,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{8:$Vq,9:168,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{8:$Vq,9:169,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{8:$Vq,9:170,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{8:$Vq,9:171,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{8:$Vq,9:172,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{8:$Vq,9:173,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{8:$Vq,9:174,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},o($V11,[2,78],{35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV}),o($VY,[2,79]),{10:[1,175],35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},{10:[1,176]},{8:$Vq,9:92,10:[1,177],26:$Vr,32:178,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{8:$Vq,9:179,26:$Vr,28:[1,180],45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{8:$Vq,9:181,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{8:$Vq,9:182,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{8:$Vq,9:183,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{8:$Vq,9:184,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{8:$Vq,9:185,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{8:$Vq,9:186,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{8:$Vq,9:187,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{11:[1,188]},{11:[2,21],35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},{31:$Vp,37:189},{10:[1,190],41:$V21},{26:[1,192]},{27:[1,193]},{26:[1,194]},{27:[1,195]},{29:[1,196],35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},{8:$Vq,9:197,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{11:[2,30]},{8:$Vq,9:198,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{31:$Vp,37:199},{31:[1,200]},{31:$Vp,37:201},{8:$Vq,9:202,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},o($V01,[2,49]),{8:$Vq,9:203,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{8:$Vq,9:204,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{11:$VI,27:$VJ},{10:[1,205],41:$V21},{31:$Vp,37:206},{10:[1,207],41:$VZ},{11:[2,32]},o($V31,[2,62],{62:$VO,63:$VP,64:$VQ,65:$VR}),o($VY,[2,77]),o($V31,[2,63],{62:$VO,63:$VP,64:$VQ,65:$VR}),o($VY,[2,76],{9:123,8:$Vq,26:$Vr,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG}),o($V41,[2,64],{65:$VR}),o($V41,[2,65],{65:$VR}),o($V41,[2,66],{65:$VR}),o($VY,[2,67]),o($V51,[2,68],{35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,68:$VU,69:$VV}),o($V51,[2,69],{35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,68:$VU,69:$VV}),o($V61,[2,70],{45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR}),o($V61,[2,71],{45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR}),o($V61,[2,72],{45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR}),o($V61,[2,73],{45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR}),o($V11,[2,74],{35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV}),o([10,11,29,31,33,41,71],[2,75],{35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW}),o($VY,[2,80]),{8:$Vq,9:208,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},o($VY,[2,88]),{10:[1,209],41:$VZ},{29:[1,210],35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},{8:$Vq,9:211,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{10:[1,212],35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},{10:[1,213],35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},{10:[1,214],35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},{10:[1,215],35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},{10:[1,216],35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},{10:[1,217],35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},{10:[1,218],35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},o($Vi,[2,5]),o($Vi,[2,25]),{31:$Vp,37:219},{25:220,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh},o($V71,[2,34]),{30:[1,221],31:[1,222]},{27:[1,223]},{8:$Vq,9:224,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{29:[1,225]},{10:[1,226],35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},o($V_,[2,100],{35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX}),o($Vi,[2,42],{48:[1,227]}),{50:228,52:[1,229]},o($Vi,[2,51]),{10:[1,230],35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},{11:[1,231],35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},{11:[1,232],35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},{31:$Vp,37:233},o($Vi,[2,28]),{11:[2,31]},o($VY,[2,90]),o($VY,[2,89]),o($VY,[2,98]),{29:[1,234],35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},o($VY,[2,91]),o($VY,[2,92]),o($VY,[2,93]),o($VY,[2,94]),o($VY,[2,95]),o($VY,[2,96]),o($VY,[2,97]),o($Vi,[2,26]),{26:[1,235]},{25:236,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh},{8:$Vq,9:92,26:$Vr,32:237,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{30:[1,238]},{11:[2,37],35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},{27:[1,239]},{11:[2,38]},{14:241,31:$Vp,37:240,47:$V8},{33:[1,242],51:[1,243],52:[1,244]},{8:$Vq,9:245,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{11:[2,52]},{26:$V81,56:246},{26:$V81,56:248},o($Vi,[2,27]),{29:[1,249]},o($V71,[2,33]),{28:[1,250]},{33:[1,251],41:$VZ},{34:[1,252]},{8:$Vq,9:253,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},o($Vi,[2,43]),o($Vi,[2,44]),o($Vi,[2,45]),{31:$Vp,37:254},{8:$Vq,9:255,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{31:$Vp,35:$VK,36:$VL,37:256,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},{10:[1,257]},{27:[1,259],42:258,45:$Vn,46:$Vo},{10:[1,260]},o($VY,[2,99]),{8:$Vq,9:261,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{11:[2,23]},{35:[1,262]},{11:[2,39],35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},{33:[1,263]},{31:$Vp,35:$VK,36:$VL,37:264,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},o($V91,[2,48]),{31:$Vp,37:265},{10:[2,55]},{8:$Vq,9:266,26:$Vr,45:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{31:$Vp,37:267},{29:[1,268],35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},{25:269,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh},o($Vi,[2,46]),o($V91,[2,47]),o($Vi,[2,53]),{10:[2,56],35:$VK,36:$VL,45:$VM,46:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX},o($Vi,[2,54]),{11:[2,22]},{36:[1,270]},{11:[2,24]}],
defaultActions: {34:[2,1],36:[2,2],48:[2,36],90:[2,29],145:[2,30],158:[2,32],207:[2,31],226:[2,38],230:[2,52],251:[2,23],258:[2,55],268:[2,22],270:[2,24]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //Varias variables para guardar simbolos e instrucciones para retornalas a la interfaz
    var Simbolos=new Map();
    var pilaCicl=[];
    var pilaFun=[];
    var consolita=""
    var consolita2=""
    var errores="Errores:\n"
    //Objeto para delimitar los bloques de instrucciones
    const Entorno=function(anterior){
        return{
            Simbolos:new Map(),
            anterior:anterior
        }
    }
    //Entorno que engloba el programa
    var Global=Entorno(null)
    //Objeto creado para la creacion de variables
    function NuevoSimbolo(valor,tipo,Exp,tipo2){
        return{
            Valor:valor,
            Tipo:tipo,
            Exp:Exp,
            Ti:tipo2
        }
    }
    //objeto creado para diferenciar las creaciones de operaciones
    function NuevaOp(Operandoizq,Operandoder,tipo){
        return{
            Opizq:Operandoizq,
            Opder:Operandoder,
            Tipo:tipo
        }
    }
    //objeto creado para diferenciar la accion print
    const Imprimir=function(Exp,tipo){

        return{
            Exp:Exp,
            TipoIns:tipo
        }

    }
    //objeto para diferenciar el operador unario de una resta
    function OperaUna(Operandoizq,tipo){
        return{
            Opizq:Operandoizq,
            Opder:null,
            Tipo:tipo
        }
    }
    //funcion dada den taller de jison para ejecutar bloques de instrucciones
    function EjectBloque(LINS,ent){
        var retu=null;
        for(var elemento of LINS){
       
            switch(elemento.TipoIns){
                case "imprimir":
                    var e=evaluar(elemento.Exp,ent);
                    console.log(e.Valor);
                    consolita+=String(e.Valor)+"\n"
                    consolita2+=consolita
                    
                    
                    break;
                case "crear":
                   retu=ExecCrear(elemento,ent);
                    break;
                case "asignar":
                    retu=ExecAsign(elemento,ent);
                    break;
                case "SI":
                    retu=ExecSI(elemento,ent,ent)
                    break;
                case "switch":
                    retu=ExecSwitchi(elemento,ent)
                    break;
                case "while":
                    retu=ExecWhiles(elemento,ent)
                    break;
                case "do while":
                    retu=ExecWhiles2(elemento,ent)
                    break;
                case "for":
                    retu=ExecFores(elemento,ent)
                    break
                case "funcion":
                    retu=ExecFuncionar(elemento,Global)
                    break
                case "llamada":
                    ExecLlamar(elemento,ent)
                    retu=null
                    break
                case "return":
                    if(pilaFun.length>0){
                        retu=elemento.Exp
                    }else{
                        console.log("Instruccion return fuera de una funcion o metodo")
                        errores+="Instruccion return fuera de una funcion o metodo\n"
                    }
                    break
                case "break":
                    if(pilaCicl.length>0){
                    return elemento
                    }else{
                        console.log("Break fuera de un switch o ciclo detectado")
                        errores+="Break fuera de un switch o ciclo detectado\n"
                    }
                    break;
                case "continue":
                    if(pilaCicl.length>0){
                        return elemento
                    }else{
                        console.log("continue fuera de un switch o ciclo detectado")
                        errores+="continue fuera de un switch o ciclo detectado\n"
                    }
            }
            if(retu){
                
                return retu
            }
        }
        
        return null
    }
    //funcion dada en taller de jison para llevar a cabo operaciones entre valores
    function evaluar(operacion,ent){
        var izq;
        var der;
        switch(operacion.Tipo){
            case "bool":
                return NuevoSimbolo(operacion.Valor,operacion.Tipo)
            
            case "String":
                return NuevoSimbolo(operacion.Valor,operacion.Tipo)
            case "int":
                return NuevoSimbolo(parseFloat(operacion.Valor),operacion.Tipo)
            case "double":
                return NuevoSimbolo(parseFloat(operacion.Valor),operacion.Tipo)
            case "ID":
            var temporal=ent
                while(temporal!=null){
                    if (temporal.Simbolos.has(operacion.Valor)){
                        var valorID=temporal.Simbolos.get(operacion.Valor)
                        return NuevoSimbolo(valorID.Valor,valorID.Tipo)
                    }
                    temporal=temporal.anterior
                }
                console.log("No existe la variable: "+operacion.Valor);
                errores+="No existe la variable: "+operacion.Valor+"\n"
                return NuevoSimbolo("@error@","error");
            case "char":
                return NuevoSimbolo(operacion.Valor,operacion.Tipo)
            case "cambio":
                var result=ExecCambios(Cambios(operacion.Valor.Exp,operacion.Valor.Tipo),ent)
                return result
            case "mayus":
                var result=ExecLetras(Letras(operacion.Exp,operacion.Ti),ent)
                return result
            case "funcion":
                var result=ExecLlamar(LLAMADA(operacion.Valor.Exp,operacion.Valor.Param),ent)
                return result
            case "array":
                var temporal=ent
                while(temporal!=null){
                    if(temporal.Simbolos.has(operacion.Exp)){
                        var val=temporal.Simbolos.get(operacion.Exp)
                        var auxiliar=evaluar(operacion.Ti,ent)
                        if(auxiliar.Tipo=="int" && auxiliar.Valor>=0 &&auxiliar.Valor<=(val.length-1)){
                            val=val[auxiliar.Valor]
                            return NuevoSimbolo(val.Valor,val.Tipo)
                        }else{
                            console.log("La posicion: "+operacion.Valor.Param.Valor+" Se encuentra fuera del tamaño indicado anteriormente")
                            errores+="La posicion: "+operacion.Valor.Param.Valor+" Se encuentra fuera del tamaño indicado anteriormente\n"
                            return NuevoSimbolo("@error@","error")
                        }
                    }
                    temporal=temporal.anterior
                }
                console.log("No existe el array"+operacion.Valor)
                errores+="No existe el array"+operacion.Valor+"\n"
                return NuevoSimbolo("@error@","error")
                break
            case "list":
                var temporal=ent
                while(temporal!=null){
                    if(temporal.Simbolos.has(operacion.Exp)){
                        var val=temporal.Simbolos.get(operacion.Exp)
                        var auxiliar=evaluar(operacion.Ti,ent)
                        if(auxiliar.Tipo=="int" && auxiliar.Valor>=0 &&auxiliar.Valor<=(val.length-1)){
                            val=val[auxiliar.Valor+1]
                            return NuevoSimbolo(val.Valor,val.Tipo)
                        }else{
                            console.log("La posicion: "+operacion.Valor.Param.Valor+" Se encuentra fuera del tamaño indicado anteriormente")
                            errores+="La posicion: "+operacion.Valor.Param.Valor+" Se encuentra fuera del tamaño de la lista \n"
                            return NuevoSimbolo("@error@","error")
                        }
                    }
                    temporal=temporal.anterior
                }
                console.log("No existe la lista"+operacion.Valor)
                errores+="No existe la lista"+operacion.Valor+"\n"
                return NuevoSimbolo("@error@","error")
            case "redondeos":
                var result=ExecRedondeos(REDONDEOS(operacion.Exp,operacion.Ti),ent)
                return result
        }
        izq=evaluar(operacion.Opizq,ent)
        if (operacion.Opder!=null){
            der=evaluar(operacion.Opder,ent)

        }
        var retorno="error"
        switch (operacion.Tipo){
            case "+":
                switch(izq.Tipo){
                    case "int":
                        if(!der){
                            retorno="int"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="int"
                                 return NuevoSimbolo(izq.Valor+der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno);
                                break
                            case "bool":
                                retorno="int"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno); 
                                break
                            case "char":
                                retorno="int"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno); 
                                break
                            case "String":
                                retorno="String"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno);  
                                break
                        }
                    case "double":
                        if(!der){
                            retorno="double"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="double"
                                 return NuevoSimbolo(izq.Valor+der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno);
                                break
                            case "bool":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno); 
                                break
                            case "char":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno); 
                                break
                            case "String":
                                retorno="String"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno);  
                                break
                        }
                    case "bool":
                        if(!der){
                            retorno="bool"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="int"
                                 return NuevoSimbolo(izq.Valor+der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno);
                                break
                            case "String":
                                retorno="String"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno);  
                                break
                        }
                    case "char":
                        if(!der){
                            retorno="char"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="int"
                                 return NuevoSimbolo(izq.Valor+der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno);
                                break
                            case "char":
                                retorno="String"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno); 
                                break
                            case "String":
                                retorno="String"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno);  
                                break
                        }
                    case "String":
                        if(!der){
                            retorno="String"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="String"
                                 return NuevoSimbolo(izq.Valor+der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="String"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno);
                                break
                            case "bool":
                                retorno="String"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno); 
                                break
                            case "char":
                                retorno="String"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno); 
                                break
                            case "String":
                                retorno="String"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno);  
                                break
                        }
                }
                break;
            case "-":
                switch(izq.Tipo){
                    case "int":
                        if(!der){
                            retorno="int"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="int"
                                 return NuevoSimbolo(izq.Valor-der.Valor,retorno);
                                 break 
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor-der.Valor,retorno);
                                break
                            case "bool":
                                retorno="int"
                                return NuevoSimbolo(izq.Valor-der.Valor,retorno); 
                                break
                            case "char":
                                retorno="int"
                                return NuevoSimbolo(izq.Valor-der.Valor,retorno); 
                                break
                             
                        }
                    case "double":
                        if(!der){
                            retorno="double"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="double"
                                 return NuevoSimbolo(izq.Valor-der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor-der.Valor,retorno);
                                break
                            case "bool":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor-der.Valor,retorno); 
                                break
                            case "char":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor-der.Valor,retorno); 
                                break
                            
                        }
                    case "bool":
                        if(!der){
                            retorno="bool"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="int"
                                 return NuevoSimbolo(izq.Valor-der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor-der.Valor,retorno);
                                break
                            
                        }
                    case "char":
                        if(!der){
                            retorno="char"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="int"
                                 return NuevoSimbolo(izq.Valor-der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor-der.Valor,retorno);
                                break
                            
                        }
                }
                break;
            case "*":
                switch(izq.Tipo){
                    case "int":
                        if(!der){
                            retorno="int"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="int"
                                 return NuevoSimbolo(izq.Valor*der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor*der.Valor,retorno);
                                break
                            
                            case "char":
                                retorno="int"
                                return NuevoSimbolo(izq.Valor*der.Valor,retorno); 
                                break
                        }
                    case "double":
                        if(!der){
                            retorno="double"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="double"
                                 return NuevoSimbolo(izq.Valor*der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor*der.Valor,retorno);
                                break
                             
                            case "char":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor*der.Valor,retorno); 
                                break
                            
                        }
                    case "char":
                        if(!der){
                            retorno="char"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="int"
                                 return NuevoSimbolo(izq.Valor*der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor*der.Valor,retorno);
                                break
                             
                        }
                }
                break;
            case "/":
                switch(izq.Tipo){
                    case "int":
                        if(!der){
                            retorno="int"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="double"
                                 return NuevoSimbolo(izq.Valor/der.Valor,retorno);
                                 break 
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor/der.Valor,retorno);
                                break
                             
                            case "char":
                                retorno="int"
                                return NuevoSimbolo(izq.Valor/der.Valor,retorno); 
                                break
                             
                        }
                    case "double":
                        if(!der){
                            retorno="double"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="double"
                                 return NuevoSimbolo(izq.Valor/der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor/der.Valor,retorno);
                                break
                             
                            case "char":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor/der.Valor,retorno); 
                                break
                             
                        }
                    
                    case "char":
                        if(!der){
                            retorno="char"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="int"
                                 return NuevoSimbolo(izq.Valor/der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor/der.Valor,retorno);
                                break
                             
                        }
                    
                }
                break;
            case "umenos":
                switch(izq.Tipo){
                    case "int":
                        if(!der){
                            retorno="int"
                           return NuevoSimbolo(0-izq.Valor,retorno)
                            break
                        }
                        
                    case "double":
                        if(!der){
                            retorno="double"
                           return NuevoSimbolo(0-izq.Valor,retorno)
                            break
                        }
                }
                        
                    
                break;
            case "%":
                switch(izq.Tipo){
                    case "int":
                        if(!der){
                            retorno="int"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="int"
                                 return NuevoSimbolo(izq.Valor%der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor%der.Valor,retorno);
                                break 
                        }
                    case "double":
                        if(!der){
                            retorno="double"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="double"
                                 return NuevoSimbolo(izq.Valor%der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor%der.Valor,retorno);
                                break
                              
                        }
                }
                   
                break;
            case "^":
            switch(izq.Tipo){
                    case "int":
                        if(!der){
                            retorno="int"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="int"
                                 return NuevoSimbolo(Math.pow(izq.Valor,der.Valor),retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(Math.pow(izq.Valor,der.Valor),retorno);
                                break
                            
                        }
                    case "double":
                        if(!der){
                            retorno="int"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="double"
                                 return NuevoSimbolo(Math.pow(izq.Valor,der.Valor),retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(Math.pow(izq.Valor,der.Valor),retorno);
                                break
                            
                        }
            }
            case "not":
                return NuevoSimbolo(!izq.Valor,izq.Tipo);
                break;
            case "and":
                return NuevoSimbolo(izq.Valor&&der.Valor,izq.Tipo);
                break;
            case "or":
                return NuevoSimbolo(izq.Valor||der.Valor,izq.Tipo);
                break;
            case ">":
                return NuevoSimbolo(izq.Valor>der.Valor,"bool");
                break;
            case "<":
                return NuevoSimbolo(izq.Valor<der.Valor,"bool");
                break;
            case ">=":
                return NuevoSimbolo(izq.Valor>=der.Valor,"bool");
                break;
            case "<=":
                return NuevoSimbolo(izq.Valor<=der.Valor,"bool");
                break;
            case "==":
                return NuevoSimbolo(izq.Valor==der.Valor,"bool");
                break;
            case "!=":
                return NuevoSimbolo(izq.Valor!=der.Valor,"bool");
                break;
            
        }
    }
    //objeto creado para diferenciar la instruccion crear de otras
    const Creacion=function(ID,Tipo,Exp,Tipo2,Tam){
        return{
            Id:ID,
            Tipo:Tipo,
            Exp:Exp,
            Tipo2:Tipo2,
            Tamaño:Tam,
            TipoIns:"crear"
        }
    }
    //Funcion daa en taller de jison para ejecutar la creacion de variables
    function ExecCrear(Crear,ent){
        if(ent.Simbolos.has(Crear.Id)){
            console.log("La variable: "+Crear.Id+" ya existe en este ambito")
            errores+="La variable: "+Crear.Id+" ya existe en este ambito\n"
            return;
        }

        var  valor;
        
            if(Crear&& Crear.Exp){
                if(Crear.Tipo2){
                    if(Crear.Tipo==Crear.Tipo2){
                        Crear.Tipo2="array"
                        valor=[]
                        for(var array of Crear.Exp){
                            var val=evaluar(array,ent)
                            if(Crear.Tipo=="string"){
                                Crear.Tipo="String"
                            }
                            if(Crear.Tipo=="boolean"){
                                Crear.Tipo="bool"
                            }
                            if(val.Tipo==Crear.Tipo){
                                valor.push(val)
                            }else{
                                console.log("Los datos ingresados no coinciden con el tipo del array")
                                errores+="Los datos ingresados no coinciden con el tipo del array\n"
                                return
                            }
                        }
                    }else{
                        console.log("Los tipos de datos no coindicen con el del array")
                        errores+="Los datos ingresados no coinciden con el tipo del array\n"
                        return
                    }
                    
                }else{
                    if(Crear.Tipo=="string"){
                        Crear.Tipo="String"
                    }
                    if(Crear.Tipo=="boolean"){
                        Crear.Tipo="bool"
                    }
                valor=evaluar(Crear.Exp,ent);
                if(valor.Tipo!=Crear.Tipo){
                    console.log("El tipo no coincide con la variable a crear")
                   errores+= "El tipo no coincide con la variable a crear\n"
                }
                }
                
            }else{
                if(Crear.Tipo2){
                    if (Crear.Tipo==Crear.Tipo2){
                        if(Crear.Tamaño){
                        Crear.Tipo2="array"
                        var numero=evaluar(Crear.Tamaño,ent)
                        valor=[]
                        var temporal="mientras"
                        
                        for(var tamano=0;tamano<numero.Valor;tamano++){
                            switch(Crear.Tipo){
                                case "int":
                                    temporal=NuevoSimbolo(0,"int")
                                    break;
                                case "double":
                                    temporal=NuevoSimbolo(0.0,"double")
                                    break;
                                case "char":
                                    temporal=NuevoSimbolo('\u0000',"char")
                                    break;
                                case "String":
                                    temporal=NuevoSimbolo("","String")
                                    break;
                            }
                            valor.push(temporal)

                        }
                    }else{
                        valor=[]
                        Crear.Tipo2="list"
                        valor.push(NuevoSimbolo("list",Crear.Tipo))
                    }
                    }else{
                        console.log("Los tipos de datos ingresados en el array no coinciden")
                        errores+="Los datos ingresados no coinciden con el tipo del array\n"
                        return
                    }
                }else{
                    if(Crear.Tipo=="string"){
                        Crear.Tipo="String"
                    }
                    if(Crear.Tipo=="boolean"){
                        Crear.Tipo="Boolean"
                    }
                switch(Crear.Tipo){
                    case "int":
                        valor=NuevoSimbolo(0,"int");
                        break;
                    case "String":
                        valor=NuevoSimbolo("","String")
                        break;
                    case "double":
                        valor=NuevoSimbolo(0.0,"double")
                        break;

                    case "Boolean":
                        valor=NuevoSimbolo(false,"Boolean")
                        break;
                    case "char":
                        valor=NuevoSimbolo('',"char")
                        break;

                
                }
                }
            }
            
        
        
            
        
        ent.Simbolos.set(Crear.Id,valor)
        
    }
    //Objeto para diferenciar la accion de asignar de otras
    const Asign=function(id,Exp,Exp2){
        return{
            Id:id,
            Exp:Exp,
            TipoIns:"asignar",
            Exp2:Exp2
        }
    }
    //Funcion dada en taller de jison para asignar valores a variables
    const ExecAsign=function(asignar,ent){
        var val=evaluar(asignar.Exp,ent)
        var temporal=ent
        while(temporal!=null){
            if(temporal.Simbolos.has(asignar.Id)){
                var simbol=temporal.Simbolos.get(asignar.Id);
                if(asignar.Exp2){
                    if(asignar.Exp2.Tipo!="list"){
                        var n=evaluar(asignar.Exp2,ent)
                        if(n.Tipo=="int"&&val.Tipo==simbol[0].Tipo){
                            if(n.Valor>=0 && n.Valor<simbol.length){
                                simbol[n.Valor]=val
                                return;
                            }else{
                                console.log("Ocurrio un error con: "+asignar.Id)
                                errores+="Ocurrio un error con: "+asignar.Id+"\n"
                                return
                            }
                        }else{
                            console.log("Ocurrio un error con: "+asignar.Id)
                            errores+="Ocurrio un error con: "+asignar.Id+"\n"
                                return
                        }
                    }else{
                        if(val.Tipo==simbol[0].Tipo){
                            simbol.push(val)
                            temporal.Simbolos.set(asignar.Id,simbol)
                            return
                        }
                    }
                }else{
                    if(simbol.Tipo=="Boolean"){
                        simbol.Tipo="bool"
                    }
                    if(val.Tipo=="char"){
                        if(val.Valor.length!=0){
                            console.log("La longitud de: "+val.Valor+"Es diferente de 1 por lo tanto no se considera de tipo char")
                            errores+="La longitud de: "+val.Valor+"Es diferente de 1 por lo tanto no se considera de tipo char\n"
                            return
                        }
                    }
                    if (simbol.Tipo=="double" && val.Tipo=="int"){
                    val.Tipo="double"
                }
                
                if(simbol.Tipo===val.Tipo){
                    temporal.Simbolos.set(asignar.Id,val);
                    return
                }else{
                    console.log("Tipos incompatibles: ",simbol.Tipo,",",val.Tipo)
                    errores+="Tipos incompatibles: ",simbol.Tipo,",",val.Tipo+"\n"
                    return
                }
                }
                
                
            }
            temporal=temporal.anterior
            
        }
        console.log("No se encontro la variable: ",asignar.Id)
        errores+="No se encontro la variable: ",asignar.Id+"\n"


    }
    //Objeto para diferenciar la instruccion if else de otros
    const SI=function(Exp,AreaSi,AreaSiNo){
        return{
            Exp:Exp,
            AreaSi:AreaSi,
            AreaSiNo:AreaSiNo,
            TipoIns:"SI"
        }
    }
    //Funcion dada en taller de jison para ejecutar un bloque if o else
    function ExecSI(SI,ent){
        var cond=evaluar(SI.Exp,ent)
        if (cond.Tipo="bool"){
            if(cond.Valor){
                var nuevo=Entorno(ent)
                return EjectBloque(SI.AreaSi,nuevo)
            }else if(SI.AreaSiNo!=null){
                var nuevo=Entorno(ent)
                return EjectBloque(SI.AreaSiNo,nuevo)
            }
        }else{
            console.log("Se esperab una condicion dentro del if")
            errores+="Se esperab una condicion dentro del if\n"
        }
    }
    //Objeto para diferenciar el switch de lo demas
    const SWITCHI=function(Exp, Lcases,Default){
        return{
            Exp:Exp,
            Lcases:Lcases,
            Default:Default,
            TipoIns:"switch"
        }
    }
    //Objeto para diferenciar los casos en un switch
    const Cases=function(Exp,Area){
        return{
            Exp:Exp,
            Area:Area,
        }
    }
    //Funcion dada en taller de jison para ejecutar un switch-case
    function ExecSwitchi(Switchi,ent){
        pilaCicl.push("switch")
        var eject=false
        var nuevito=Entorno(ent)
        for(var cas of Switchi.Lcases){
            var cond=evaluar(NuevaOp(Switchi.Exp,cas.Exp,"=="),ent);
            if (cond.Tipo=="bool"){
                if(cond.Valor){
                   
                    var result=EjectBloque(cas.Area,nuevito)
                    if(result && result.TipoIns=="break"){
                        pilaCicl.pop()
                        return
                    }else if(res){
                        pilaCicl.pop()
                        return result
                    }
                }
            }else{
                pilaCicl.pop()
                return
            }
        }
        if (Switchi.Default && eject==false){
            var result=EjectBloque(Switchi.Default,nuevito);
        }
        pilaCicl.pop()
        return 
    }
    //Objeto para diferenciar la instruccion rompert o break
    const ROMPER=function(){
        return{
            TipoIns:"break"
        }
    }
    //Objeto para diferencias el ciclo while de otros
    const WHILES=function(Exp,Area){
        return{
            Exp:Exp,
            Area:Area,
            TipoIns:"while"
        }
    }
    //Funcion dada en taller de jison para ejecutar un ciclo while
    function ExecWhiles(Whiles,ent){
        pilaCicl.push("while");
        
        while(true){
            nuevito=Entorno(ent)
            var result=evaluar(Whiles.Exp,ent)
            if(result.Tipo=="bool"){
                if(result.Valor){
                    var eject=EjectBloque(Whiles.Area,nuevito);
                    if (eject && eject.TipoIns=="break"){
                        break
                    }else if(eject){
                        pilaCicl.pop()
                        return eject
                    }else if(eject && eject.TipoIns=="continue"){
                        continue
                    }
                }else{
                    break
                }
            }else{
                console.log("Se esperaba una condicion dentro del ciclo while")
                errores+="Se esperaba una condicion dentro del ciclo while\n"
                pilaCicl.pop();
                return
            }
        }
    }
    //Objeto para diferencias el ciclo do while de un while normal
    const WHILES2=function(Exp,Area){
        return{
            Exp:Exp,
            Area:Area,
            TipoIns:"do while"
        }
    }
    //funcion para ejecutar un ciclo do while
    function ExecWhiles2(Whiles,ent){
        pilaCicl.push("do while");
        while(true){
            nuevito=Entorno(ent)
            var result=evaluar(Whiles.Exp,ent)
            var eject=EjectBloque(Whiles.Area,nuevito);
            if (eject && eject.TipoIns=="break"){
                break
            }else if(eject){
                pilaCicl.pop()
                return eject
            }else if(eject && eject.TipoIns=="continue"){
                continue
            }
            if(result.Tipo=="bool"){
                if(result.Valor){
                    
                    
                }else{
                    break
                }
            }else{
                console.log("Se esperaba una condicion dentro del ciclo while")
                errores+="Se esperaba una condicion dentro del ciclo while\n"
                pilaCicl.pop();
                return
            }
        }
        
    }
    //Objeto para diferenciar el ciclo for
    const FORES=function(Expinicio,Expfin,Expavance,Area){
        return{
            Expinicio:Expinicio,
            Expfin:Expfin,
            Expavance:Expavance,
            Area:Area,
            TipoIns:"for"
        }
    }
    //Funcion dada en taller de jison para ejectuar un ciclo for
    function ExecFores(desde,ent){
        pilaCicl.push("for")
        var nuevito=Entorno(ent)
        if(desde.Expinicio.TipoIns=="crear"){
            ExecCrear(desde.Expinicio,nuevito)
        }else{
            ExecAsign(desde.Expinicio,nuevito)
        }
        while(true){
            var cond=evaluar(desde.Expfin,nuevito)
            if(!cond.Valor){
                pilaCicl.pop();
                return;
            }
            var nue=Entorno(nuevito)
            var result=EjectBloque(desde.Area,nue)
            if (result && result.TipoIns=="break"){
                break
            }else if(result){
                pilaCicl.pop()
                return result
            }
            if(desde.Expavance.Exp.Opder){
                var par1=desde.Expavance.Id
                var par2=NuevaOp(desde.Expavance.Exp.Opizq,desde.Expavance.Exp.Opder,desde.Expavance.Exp.Tipo)
                var par3=Asign(par1,par2)
                ExecAsign(par3,nuevito)
            }
            if(eject && eject.TipoIns=="continue"){
                continue
            }
        }
        pilaCicl.pop();
        return
    }
    //Objeto dado en taller de jison para realizar retornos
    const RETORNAR=function(Exp){
        return{
            Exp:Exp,
            TipoIns:"return"
        }
    }
    //Objeto para diferenciar las funciones
    const FUNCIONAR=function(id,param,tipo,area){
        return{
            id:id,
            Param:param,
            Tipo:tipo,
            Area:area,
            TipoIns:"funcion"
        }
    }
    //Funcion dada en taller de jison para ejecutar el contenido de una funcion
    function ExecFuncionar(elem,ent){
        var name=elem.id+"$"
        if(ent.Simbolos.has(name)){
            console.log("La funcion: ",elem.id," ya ha sido declarada anteriormente")
            errores+="La funcion: ",elem.id," ya ha sido declarada anteriormente\n"
            return;
        }
        ent.Simbolos.set(name,elem)
    }
    //Objeto para diferencias las llamadas
    const LLAMADA=function(id,param){
        return{
            Id:id,
            Param:param,
            TipoIns:"llamada"
        }
    }
    //Funcion dada en taller de jison para llamadas a metodos y funciones
    function ExecLlamar(llamada,ent){
        var name=llamada.Id+"$"
        var resul=[]
        for(var params of llamada.Param){
            var val=evaluar(params,ent)
           
            resul.push(val)
        }
        var temporal=ent
        var simbol=null
        while(temporal!=null){
            if(temporal.Simbolos.has(name)){
                simbol=temporal.Simbolos.get(name)
                break
            }
            temporal=temporal.anterior
        }
        if(!simbol){
            console.log("No se encontro la funcion: ",llamada.Id," con los parametros indicados")
            errores+="No se encontro la funcion: ",llamada.Id," con los parametros indicados\n"
            return NuevoSimbolo("@error@","error")
        }
        pilaFun.push(llamada.Id)
        var nuevito=Entorno(Global)
        var indice=0
        for(var creacion of simbol.Param){
            creacion.Exp=resul[indice]
            ExecCrear(creacion,nuevito)
            indice++
        }
        var retorno=NuevoSimbolo("@error@","error")
        var result=EjectBloque(simbol.Area,nuevito)
        if(result){
            if(result.Tipo=="void"){
                if(simbol.Tipo!="void"){
                console.log("No se espera un retorno")
                errores+="No se espera un retorno"
                
                }else{
                retorno=NuevoSimbolo("@void@","void")

                }
            }else{
                var expresion=evaluar(result,nuevito)
                if(expresion.Tipo!=simbol.Tipo){
                    console.log("El tipo a retornar no coindice con el indicado")
                    errores+="El tipo a retornar no coindice con el indicado\n"
                    retorno=NuevoSimbolo("@error@","error")
                }else{
                    retorno=expresion
                }
            }
        }else{
            if(simbol.Tipo!="void"){
                console.log("Se espera algo a retornar")
                errores+="Se espera algo a retornar\n"
                retorno=NuevoSimbolo("@error@","error")

            }else{
                retorno=NuevoSimbolo("@void@","void")
            }
        }
        pilaFun.pop()
        return retorno
    }
    //objeto a utilizar para realizar operaciones ++ y --
    const Incrementos=function(id,Exp){
        return{
            
            Id:id,
            Exp:Exp

        }

    }
    //objeto para diferencias los casteos entre datos
    const Cambios=function(val,Tipo){
        return{
            Valor:val,
            Tipo:Tipo,
            TipoIns:"cambio"
        }
    }
    //Funcion a ejecutar para realizar casteos entre diferentes datos
    function ExecCambios(cambio,ent){
        var evaluado=evaluar(cambio.Valor,ent)
        switch(evaluado.Tipo){
            case "int":
                switch(cambio.Tipo){
                    case "double":
                        return NuevoSimbolo(evaluado.Valor,"double")
                        break
                    case "char":
                        var nuevo=String.fromCharCode(evaluado.Valor)+"";
                        return NuevoSimbolo(nuevo,"char")
                        break
                    case "String":
                        return NuevoSimbolo(evaluado.Valor+"","String")
                        break
                    case "int":
                        
                        return NuevoSimbolo(evaluado.Valor,"int")
                    default:
                        console.log("Tipo de dato incorrecto")
                        errores+="Tipo de dato incorrecton\n"
                        return NuevoSimbolo("@error@","error")
                    
                }
            case "double":
                switch(cambio.Tipo){
                    case "int":
                        var nuevo=Math.trunc(evaluado.Valor)
                        return NuevoSimbolo(nuevo,"int")
                        break
                    case "String":
                        return NuevoSimbolo(evaluado.Valor+"","String")
                        break
                    case "double":
                        
                        return NuevoSimbolo(evaluado.Valor,"double")
                    default:
                        console.log("Tipo de dato incorrecto")
                         errores+="Tipo de dato incorrecton\n"
                        return NuevoSimbolo("@error@","error")
                    
                }
            case "char":
                switch(cambio.Tipo){
                    case "int":
                        var nuevo=evaluado.Valor.charCodeAt(0)
                        return NuevoSimbolo(nuevo,"int")
                        break
                    case "double":
                        var nuevo=evaluado.Valor.charCodeAt(0)
                        return NuevoSimbolo(nuevo,"double")
                        break
                    case "char":
                        return NuevoSimbolo(evaluado.Valor,"char")
                    default:
                        console.log("Tipo de dato incorrecto")
                         errores+="Tipo de dato incorrecton\n"
                        return NuevoSimbolo("@error@","error")
                    
                }
           
            
            
                    
                
        }
    }
    //objeto para diferencias los casteos
    const Letras=function(val,Tipo){
        return{
            Valor:val,
            Tipo:Tipo,
            TipoIns:"mayus"
        }
    }
    //Funcion a ejecutar para realizar los casteos y funciones lower y upper
    function ExecLetras(mayus,ent){
        var evaluado=evaluar(mayus.Valor,ent)
        switch(mayus.Tipo){
            case "String":
                switch(evaluado.Tipo){
                    case "double":
                        return NuevoSimbolo(evaluado.Valor,"String")
                    
                    case "bool":
                        return NuevoSimbolo(evaluado.Valor+"","String")
                    case "int":
                        return NuevoSimbolo(evaluado.Valor,"String")
                    case "char":
                            return NuevoSimbolo(evaluado.Valor+"","String")
                    case "String":
                        return NuevoSimbolo(evaluado.Valor,"String")
                    default:
                        console.log("Tipo no definido")
                        errores+="Tipo no definido\n"
                        return NuevoSimbolo("@error@","error")
                }
            case "upper":
            
                if(evaluado.Tipo=="String"){
                    var val=evaluado.Valor.toUpperCase()
                    return NuevoSimbolo(val,"String")
                }else{
                    console.log("La funcion upper solo funcion en Strings y el tipo de dato fue: "+evaluado.Tipo)
                    errores+="La funcion upper solo funcion en Strings y el tipo de dato fue: "+evaluado.Tipo+"\n"
                    return NuevoSimbolo("@error@","error")
                }
            case "lower":
                
                if(evaluado.Tipo=="String"){
                    var baj=evaluado.Valor.toLowerCase()
                    return NuevoSimbolo(baj,"String")
                }else{
                    console.log("La funcion lower solo funciona en Strings y el tipo de dato fue: "+evaluado.Tipo)
                    errores+="La funcion lower solo funciona en Strings y el tipo de dato fue: "+evaluado.Tipo+"\n"

                    return NuevoSimbolo("@error@","error")
                }
            case "typeof":
                if(evaluado.Tipo!="int" &&evaluado.Tipo!="double" &&evaluado.Tipo!="char"&&evaluado.Tipo!="String"&&evaluado.Tipo!="bool" ){
                    var temporal=ent
                    var encontrado=false
                    while(temporal!=null){
                        if(temporal.Simbolos.has(mayus.Valor.Valor+"")){
                            var val=temporal.Simbolos.get(mayus.Valor.Valor)
                            if(val[0]!="list"){
                                return NuevoSimbolo("array","String")
                            }else{
                                return NuevoSimbolo("lista","String")
                            }
                        }
                        temporal=temporal.anterior
                    }
                    console.log("no se encontro la variable deseada");
                    errores+="no se encontro la variable deseada\n"
                    return NuevoSimbolo("@error@","error")
                }else{
                    switch(evaluado.Tipo){
                        case "char":
                            return NuevoSimbolo("char","String")
                        case "int":
                            return NuevoSimbolo("int","String")
                        case "double":
                            return NuevoSimbolo("double","String")
                        case "bool":
                            return NuevoSimbolo("bool","String")
                        case "String":
                            return NuevoSimbolo("String","String")
                    }
                }
            case "length":
                if(evaluado.Tipo!="String" ){
                    var temporal=ent
                    var encontrado=false
                    while(temporal!=null){
                        if(temporal.Simbolos.has(mayus.Valor.Valor+"")){
                            var val=temporal.Simbolos.get(mayus.Valor.Valor)
                            if(val[0]!="list"){
                                var largo=val.length
                                return NuevoSimbolo(largo,"int")
                            }else{
                                var largo=val.length
                                return NuevoSimbolo(largo,"int")
                            }
                        }
                        temporal=temporal.anterior
                    }
                    console.log("no se encontro la variable deseada");
                    errores+="no se encontro la variable deseada\n"
                    return NuevoSimbolo("@error@","error")
                }else{
                    switch(evaluado.Tipo){
                        case "String":
                            var largo=length(evaluado.Valor)
                            return NuevoSimbolo(largo,"int")
                    }
                }

        }
    }
    //Objeto para poder diferencias redondeos
    const REDONDEOS=function(val,Tipo){
        return{
            Valor:val,
            Tipo:Tipo,
            TipoIns:"redondeos"
        }
    }
    //Funcion a ejecutar para lso redondeos y truncamientos
    function ExecRedondeos(red,ent){
        var evaluado=evaluar(red.Valor,ent)
        switch(red.Tipo){
            case "round":
                if(evaluado.Tipo=="double"){
                    var resultado=Math.round(evaluado.Valor)
                    return NuevoSimbolo(resultado,"int")
                }

            case "length":
                switch(evaluado.Tipo){
                    case "String":
                        var largo=evaluado.Valor.length
                        return NuevoSimbolo(largo,"int")
                        break;
                }
            case "truncate":
                if(evaluado.Tipo=="double"){
                    var resultado=Math.trunc(evaluado.Valor)
                    return NuevoSimbolo(resultado,"int")
                }
                
        }
    }

    const Continue=function(){
        TipoIns:"continue"
    }
    

    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:return "int";
break;
case 4:return "Double";
break;
case 5:return "Boolean";
break;
case 6:return "Char";
break;
case 7:return "String";
break;
case 8:return "RBREAK";
break;
case 9:return "Rif";
break;
case 10:return "Relse";
break;
case 11:return "RSWITCH"
break;
case 12:return "RCASE"
break;
case 13:return "RDEFAULT"
break;
case 14:return "RWHILE"
break;
case 15:return "RFOR"
break;
case 16:return "RFUNCION"
break;
case 17:return "RVOID"
break;
case 18:return "RRETURN"
break;
case 19:return "RTOLOWER"
break;
case 20:return "RTOUPPER"
break;
case 21:return "RTOSTRING"
break;
case 22:return "RTRUNCATE"
break;
case 23:return "RROUND"
break;
case 24:return "NUEVO"
break;
case 25:return "RTYPE"
break;
case 26:return "RLENGTH"
break;
case 27:return "RDO"
break;
case 28:
break;
case 29:return "IMPRIMIR";
break;
case 30:return "PTCOMA";
break;
case 31:return "COMITA"
break;
case 32:return "PARABRE";
break;
case 33:return "PARCIERRA";
break;
case 34:return "TRUE";
break;
case 35:return "FALSE";
break;
case 36:return "MAYORIG";
break;
case 37:return "MENORIG";
break;
case 38:return "IGUALACION";
break;
case 39:return "DIFERENTE";
break;
case 40:return "IGUAL";
break;
case 41:return "MAS";
break;
case 42:return "MENOS";
break;
case 43:return "POR";
break;
case 44:return "DIV";
break;
case 45:return "MODULO";
break;
case 46:return "MAYOR";
break;
case 47:return "MENOR";
break;
case 48:return "AND";
break;
case 49:return "OR";
break;
case 50:return "NOT";
break;
case 51:return "LABRE";
break;
case 52:return "LCIERRA";
break;
case 53:return "DPUNTOS"
break;
case 54:return "CORABRE"
break;
case 55:return "CORCIERRA"
break;
case 56:return "RPUNTO"
break;
case 57:return "RLISTITA"
break;
case 58:return "RADD"
break;
case 59:return "REXEC"
break;
case 60:return "RELEVAR"
break;
case 61:return "DECIMAL"
break;
case 62:return "NUMERO"
break;
case 63:return "ID"
break;
case 64:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return "Cadena"
break;
case 65:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return "RCHAR"
break;
case 66:return 5;
break;
case 67:console.log("El simbolo "+yy_.yytext+" no se reconoce")
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[ \t\r]+)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:String\b)/i,/^(?:break\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:Default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:funcion\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:toString\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:new\b)/i,/^(?:typeof\b)/i,/^(?:length\b)/i,/^(?:do\b)/i,/^(?:\n)/i,/^(?:print\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>)/i,/^(?:<)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\{)/i,/^(?:\})/i,/^(?::)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\.)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:exec\b)/i,/^(?:\^)/i,/^(?:[0-9]+(\.[0-9]+)+\b)/i,/^(?:[0-9]+\b)/i,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/i,/^(?:"((\\")|[^\n\"])*")/i,/^(?:'((\\')|[^\n\'])*')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = inicio;
exports.Parser = inicio.Parser;
exports.parse = function () { return inicio.parse.apply(inicio, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
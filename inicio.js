/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var inicio = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,10],$V2=[1,23],$V3=[1,17],$V4=[1,22],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[1,24],$Va=[1,25],$Vb=[1,26],$Vc=[1,27],$Vd=[1,28],$Ve=[5,7,16,22,24,31,34,39,41,45,46,48,49,50,51,52],$Vf=[1,38],$Vg=[1,39],$Vh=[1,42],$Vi=[1,43],$Vj=[1,53],$Vk=[1,59],$Vl=[1,52],$Vm=[1,51],$Vn=[1,54],$Vo=[1,55],$Vp=[1,56],$Vq=[1,57],$Vr=[1,58],$Vs=[1,60],$Vt=[1,61],$Vu=[10,24,26],$Vv=[2,18],$Vw=[1,63],$Vx=[1,82],$Vy=[1,81],$Vz=[1,83],$VA=[1,84],$VB=[1,85],$VC=[1,86],$VD=[1,87],$VE=[1,88],$VF=[1,89],$VG=[1,90],$VH=[1,91],$VI=[1,92],$VJ=[1,93],$VK=[10,11,27,29,31,35,37,38,53,54,55,56,57,58,59,60,61,62,63],$VL=[1,109],$VM=[10,31,35],$VN=[10,11],$VO=[10,11,27,29,31,35,62,63],$VP=[1,142],$VQ=[1,144],$VR=[10,11,27,29,31,35,37,38,56,57,58,59,60,61,62,63],$VS=[10,11,27,29,31,35,56,57,62,63],$VT=[10,11,27,29,31,35,56,57,58,59,60,61,62,63],$VU=[10,35],$VV=[5,7,16,22,24,31,34,39,40,41,43,44,45,46,48,49,50,51,52],$VW=[1,183],$VX=[31,43,44];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"LINS":4,"EOF":5,"INS":6,"IMPRIMIR":7,"PARABRE":8,"EXP":9,"PARCIERRA":10,"PTCOMA":11,"CREAR":12,"ASIGNAR":13,"IF":14,"SWITCH":15,"RBREAK":16,"MIENTRAS":17,"DESDE":18,"FUNCION":19,"LLAMAR":20,"RETORNAR":21,"RRETURN":22,"TIPO":23,"ID":24,"IGUAL":25,"CORABRE":26,"CORCIERRA":27,"NUEVO":28,"LABRE":29,"LISTAEXP":30,"LCIERRA":31,"AREA":32,"PARAMS":33,"RVOID":34,"COMITA":35,"CAMBIAR":36,"MENOS":37,"MAS":38,"Rif":39,"Relse":40,"RSWITCH":41,"LCASES":42,"RDEFAULT":43,"RCASE":44,"RWHILE":45,"RFOR":46,"INCREMENTO":47,"int":48,"Double":49,"Boolean":50,"Char":51,"String":52,"POR":53,"DIV":54,"MODULO":55,"IGUALACION":56,"DIFERENTE":57,"MENOR":58,"MAYOR":59,"MENORIG":60,"MAYORIG":61,"AND":62,"OR":63,"NOT":64,"TRUE":65,"FALSE":66,"Cadena":67,"DECIMAL":68,"NUMERO":69,"RTOUPPER":70,"RTOLOWER":71,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"IMPRIMIR",8:"PARABRE",10:"PARCIERRA",11:"PTCOMA",16:"RBREAK",22:"RRETURN",24:"ID",25:"IGUAL",26:"CORABRE",27:"CORCIERRA",28:"NUEVO",29:"LABRE",31:"LCIERRA",34:"RVOID",35:"COMITA",37:"MENOS",38:"MAS",39:"Rif",40:"Relse",41:"RSWITCH",43:"RDEFAULT",44:"RCASE",45:"RWHILE",46:"RFOR",48:"int",49:"Double",50:"Boolean",51:"Char",52:"String",53:"POR",54:"DIV",55:"MODULO",56:"IGUALACION",57:"DIFERENTE",58:"MENOR",59:"MAYOR",60:"MENORIG",61:"MAYORIG",62:"AND",63:"OR",64:"NOT",65:"TRUE",66:"FALSE",67:"Cadena",68:"DECIMAL",69:"NUMERO",70:"RTOUPPER",71:"RTOLOWER"},
productions_: [0,[3,2],[3,2],[4,2],[4,1],[6,5],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[6,1],[21,3],[21,2],[12,2],[12,4],[12,10],[12,8],[19,5],[19,6],[19,6],[19,5],[20,3],[20,4],[33,4],[33,2],[13,3],[13,2],[36,2],[36,2],[14,5],[14,7],[14,7],[15,7],[15,9],[42,4],[42,3],[32,3],[32,2],[17,5],[18,9],[18,9],[47,2],[47,3],[23,1],[23,1],[23,1],[23,1],[23,1],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,2],[9,3],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,3],[9,4],[9,4],[9,4],[9,4],[9,4],[30,3],[30,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log(JSON.stringify($$[$0-1],null,2)); console.log(consolita); EjectBloque($$[$0-1],Global); return{consola:consolita};
break;
case 2:
console.log("Sintactico","Error en : '"+yytext+"'",this._$.first_line,this._$.first_column);
break;
case 3:
this.$=$$[$0-1]; this.$.push($$[$0]);
break;
case 4:
this.$=[]; this.$.push($$[$0]);
break;
case 5:
this.$=Imprimir($$[$0-2],"imprimir");
break;
case 6: case 14: case 41:
this.$=$$[$0-1];
break;
case 7: case 32: case 33: case 70:
this.$=$$[$0-1]
break;
case 8: case 9: case 11: case 12: case 48: case 49: case 50: case 51: case 52:
this.$=$$[$0]
break;
case 10:
this.$=ROMPER()
break;
case 13:
this.$=$$[$0];
break;
case 16:
this.$=RETORNAR($$[$0-1])
break;
case 17:
this.$=RETORNAR(NuevoSimbolo("@vacio@","vacio"))
break;
case 18:
this.$=Creacion($$[$0],$$[$0-1],null);
break;
case 19:
this.$=Creacion($$[$0-2],$$[$0-3],$$[$0]);
break;
case 20:
this.$=Creacion($$[$0-6],$$[$0-9],null,$$[$0-3],$$[$0-1])
break;
case 21:
this.$=Creacion($$[$0-4],$$[$0-7],$$[$0-1],$$[$0-7],null)
break;
case 22:
this.$=FUNCIONAR($$[$0-3],[],$$[$0-4],$$[$0])
break;
case 23:
this.$=FUNCIONAR($$[$0-4],$$[$0-2],$$[$0-5],$$[$0])
break;
case 24:
this.$=FUNCIONAR($$[$0-4],$$[$0-2],"void",$$[$0])
break;
case 25:
this.$=FUNCIONAR($$[$0-3],[],"void",$$[$0])
break;
case 26:
this.$=LLAMADA($$[$0-2],[])
break;
case 27:
this.$=LLAMADA($$[$0-3],$$[$0-1])
break;
case 28:
this.$=$$[$0-3];this.$.push(Creacion($$[$0],$$[$0-1],null))
break;
case 29:
this.$=[];this.$.push(Creacion($$[$0],$$[$0-1],null))
break;
case 30:
this.$=Asign($$[$0-2],$$[$0])
break;
case 31:
this.$=Asign($$[$0-1],NuevaOp(NuevoSimbolo($$[$0-1],"ID"),NuevoSimbolo(parseFloat(1),"int"),$$[$0]))
break;
case 34:
this.$=SI($$[$0-2],$$[$0],null);
break;
case 35:
this.$=SI($$[$0-4],$$[$0-2],$$[$0]);
break;
case 37:
this.$=SWITCHI($$[$0-4],$$[$0-1],null);
break;
case 38:
this.$=SWITCHI($$[$0-6],$$[$0-3],$$[$0-1]);
break;
case 39:
this.$=$$[$0-3]; this.$.push(Cases($$[$0-1],$$[$0]));
break;
case 40:
this.$=[]; this.$.push(Cases($$[$0-1],$$[$0]));
break;
case 42:
this.$=[];
break;
case 43:
this.$=WHILES($$[$0-2],$$[$0])
break;
case 44: case 45:
this.$=FORES($$[$0-6],$$[$0-4],$$[$0-2],$$[$0])
break;
case 46:
this.$=Incrementos($$[$0-1],NuevaOp(NuevoSimbolo($$[$0-1],"ID"),NuevoSimbolo(parseFloat(1),"int"),$$[$0]))
break;
case 47:
this.$=Incrementos($$[$0-2],$$[$0])
break;
case 53:
this.$=NuevaOp($$[$0-2],$$[$0],"+");
break;
case 54:
this.$=NuevaOp($$[$0-2],$$[$0],"-");
break;
case 55:
this.$=NuevaOp($$[$0-2],$$[$0],"*");
break;
case 56:
this.$=NuevaOp($$[$0-2],$$[$0],"/");
break;
case 57:
this.$=NuevaOp($$[$0-2],$$[$0],"%");
break;
case 58:
this.$=NuevaOp($$[$0-2],$$[$0],"==");
break;
case 59:
this.$=NuevaOp($$[$0-2],$$[$0],"!=");
break;
case 60:
this.$=NuevaOp($$[$0-2],$$[$0],"<");
break;
case 61:
this.$=NuevaOp($$[$0-2],$$[$0],">");
break;
case 62:
this.$=NuevaOp($$[$0-2],$$[$0],"<=");
break;
case 63:
this.$=NuevaOp($$[$0-2],$$[$0],">=");
break;
case 64:
this.$=NuevaOp($$[$0-2],$$[$0],"and");
break;
case 65:
this.$=NuevaOp($$[$0-2],$$[$0],"or");
break;
case 66:
this.$=NuevaOp($$[$0-2],NuevoSimbolo(parseFloat(1),"int"),"-")
break;
case 67:
this.$=NuevaOp($$[$0-2],NuevoSimbolo(parseFloat(1),"int"),"+")
break;
case 68:
this.$=OperaUna($$[$0],"not");
break;
case 69:
this.$=OperaUna($$[$0],"umenos");
break;
case 71:
this.$=NuevoSimbolo(true,"bool");
break;
case 72:
this.$=NuevoSimbolo(false,"bool");
break;
case 73:
this.$=NuevoSimbolo($$[$0],"String");
break;
case 74:
this.$=NuevoSimbolo($$[$0],"double");
break;
case 75:
this.$=NuevoSimbolo($$[$0],"int");
break;
case 76:
this.$=NuevoSimbolo($$[$0],"ID");
break;
case 77:
this.$=NuevoSimbolo({Id:$$[$0-2],Param:[]},"funcion")
break;
case 78:
this.$=NuevoSimbolo({Id:$$[$0-3],Param:$$[$0-1] },"funcion")
break;
case 79:
this.$=NuevoSimbolo({Id:$$[$0],Tipo:$$[$0-2]},"cambio")
break;
case 80:
this.$=NuevoSimbolo({Id:$$[$0-1],Tipo:"upper"},"mayus")
break;
case 81:
this.$=NuevoSimbolo({Id:$$[$0-1],Tipo:"lower"},"mayus")
break;
case 82:
this.$=NuevoSimbolo({Id:$$[$0-3],Param:$$[$0-1]},"array")
break;
case 83:
this.$=$$[$0-2];this.$.push($$[$0])
break;
case 84:
this.$=[];this.$.push($$[$0])
break;
}
},
table: [{2:[1,3],3:1,4:2,6:4,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:12,19:13,20:14,21:15,22:$V2,23:16,24:$V3,34:$V4,39:$V5,41:$V6,45:$V7,46:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd},{1:[3]},{5:[1,29],6:30,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:12,19:13,20:14,21:15,22:$V2,23:16,24:$V3,34:$V4,39:$V5,41:$V6,45:$V7,46:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd},{5:[1,31]},o($Ve,[2,4]),{8:[1,32]},{11:[1,33]},{11:[1,34]},o($Ve,[2,8]),o($Ve,[2,9]),{11:[1,35]},o($Ve,[2,11]),o($Ve,[2,12]),o($Ve,[2,13]),{11:[1,36]},o($Ve,[2,15]),{24:[1,37],26:$Vf},{8:[1,41],25:$Vg,36:40,37:$Vh,38:$Vi},{8:[1,44]},{8:[1,45]},{8:[1,46]},{8:[1,47]},{24:[1,48]},{8:$Vj,9:49,11:[1,50],24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},o($Vu,[2,48]),o($Vu,[2,49]),o($Vu,[2,50]),o($Vu,[2,51]),o($Vu,[2,52]),{1:[2,1]},o($Ve,[2,3]),{1:[2,2]},{8:$Vj,9:62,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,10]),o($Ve,[2,14]),{8:[1,64],11:$Vv,25:$Vw},{27:[1,65]},{8:$Vj,9:66,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{11:[2,31]},{8:$Vj,9:69,10:[1,67],24:$Vk,30:68,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{37:[1,70]},{38:[1,71]},{8:$Vj,9:72,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{8:$Vj,9:73,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{8:$Vj,9:74,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{12:75,13:76,23:77,24:[1,78],48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd},{8:[1,79]},{11:[1,80],37:$Vx,38:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},o($Ve,[2,17]),{8:$Vj,9:94,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{8:$Vj,9:95,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{8:$Vj,9:96,23:97,24:$Vk,37:$Vl,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},o($VK,[2,71]),o($VK,[2,72]),o($VK,[2,73]),o($VK,[2,74]),o($VK,[2,75]),o($VK,[2,76],{8:[1,98],26:[1,99]}),{8:[1,100]},{8:[1,101]},{10:[1,102],37:$Vx,38:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},{8:$Vj,9:103,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{10:[1,104],23:106,33:105,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd},{24:[1,107]},{11:[2,30],37:$Vx,38:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},{11:[2,26]},{10:[1,108],35:$VL},o($VM,[2,84],{37:$Vx,38:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ}),o($VN,[2,32]),o($VN,[2,33]),{10:[1,110],37:$Vx,38:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},{10:[1,111],37:$Vx,38:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},{10:[1,112],37:$Vx,38:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},{11:[1,113]},{11:[1,114]},{24:[1,115],26:$Vf},{25:$Vg,36:40,37:$Vh,38:$Vi},{10:[1,117],23:106,33:116,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd},o($Ve,[2,16]),{8:$Vj,9:118,24:$Vk,37:$Vl,38:[1,119],64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{8:$Vj,9:120,24:$Vk,37:[1,121],64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{8:$Vj,9:122,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{8:$Vj,9:123,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{8:$Vj,9:124,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{8:$Vj,9:125,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{8:$Vj,9:126,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{8:$Vj,9:127,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{8:$Vj,9:128,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{8:$Vj,9:129,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{8:$Vj,9:130,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{8:$Vj,9:131,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{8:$Vj,9:132,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},o($VO,[2,68],{37:$Vx,38:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH}),o($VK,[2,69]),{10:[1,133],37:$Vx,38:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},{10:[1,134]},{8:$Vj,9:69,10:[1,135],24:$Vk,30:136,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{8:$Vj,9:137,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{8:$Vj,9:138,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{8:$Vj,9:139,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{11:[1,140]},{11:[2,19],37:$Vx,38:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},{29:$VP,32:141},{10:[1,143],35:$VQ},{24:[1,145]},{25:[1,146]},{11:[2,27]},{8:$Vj,9:147,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{29:$VP,32:148},{29:[1,149]},{29:$VP,32:150},{8:$Vj,9:151,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{8:$Vj,9:152,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{11:$Vv,25:$Vw},{10:[1,153],35:$VQ},{29:$VP,32:154},o($VR,[2,53],{53:$Vz,54:$VA,55:$VB}),o($VK,[2,67]),o($VR,[2,54],{53:$Vz,54:$VA,55:$VB}),o($VK,[2,66],{9:95,8:$Vj,24:$Vk,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt}),o($VK,[2,55]),o($VK,[2,56]),o($VK,[2,57]),o($VS,[2,58],{37:$Vx,38:$Vy,53:$Vz,54:$VA,55:$VB,58:$VE,59:$VF,60:$VG,61:$VH}),o($VS,[2,59],{37:$Vx,38:$Vy,53:$Vz,54:$VA,55:$VB,58:$VE,59:$VF,60:$VG,61:$VH}),o($VT,[2,60],{37:$Vx,38:$Vy,53:$Vz,54:$VA,55:$VB}),o($VT,[2,61],{37:$Vx,38:$Vy,53:$Vz,54:$VA,55:$VB}),o($VT,[2,62],{37:$Vx,38:$Vy,53:$Vz,54:$VA,55:$VB}),o($VT,[2,63],{37:$Vx,38:$Vy,53:$Vz,54:$VA,55:$VB}),o($VO,[2,64],{37:$Vx,38:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH}),o([10,11,27,29,31,35,63],[2,65],{37:$Vx,38:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI}),o($VK,[2,70]),{8:$Vj,9:155,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},o($VK,[2,77]),{10:[1,156],35:$VL},{27:[1,157],37:$Vx,38:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},{10:[1,158],37:$Vx,38:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},{10:[1,159],37:$Vx,38:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},o($Ve,[2,5]),o($Ve,[2,22]),{4:160,6:4,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:12,19:13,20:14,21:15,22:$V2,23:16,24:$V3,31:[1,161],34:$V4,39:$V5,41:$V6,45:$V7,46:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd},{29:$VP,32:162},{23:163,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd},o($VU,[2,29]),{28:[1,164],29:[1,165]},o($VM,[2,83],{37:$Vx,38:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ}),o($Ve,[2,34],{40:[1,166]}),{42:167,44:[1,168]},o($Ve,[2,43]),{11:[1,169],37:$Vx,38:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},{11:[1,170],37:$Vx,38:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},{29:$VP,32:171},o($Ve,[2,25]),o($VK,[2,79]),o($VK,[2,78]),o($VK,[2,82]),o($VK,[2,80]),o($VK,[2,81]),{6:30,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:12,19:13,20:14,21:15,22:$V2,23:16,24:$V3,31:[1,172],34:$V4,39:$V5,41:$V6,45:$V7,46:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd},o($VV,[2,42]),o($Ve,[2,23]),{24:[1,173]},{23:174,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd},{8:$Vj,9:69,24:$Vk,30:175,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{14:177,29:$VP,32:176,39:$V5},{31:[1,178],43:[1,179],44:[1,180]},{8:$Vj,9:181,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{24:$VW,47:182},{24:$VW,47:184},o($Ve,[2,24]),o($VV,[2,41]),o($VU,[2,28]),{26:[1,185]},{31:[1,186],35:$VL},o($Ve,[2,35]),o($Ve,[2,36]),o($Ve,[2,37]),{29:$VP,32:187},{8:$Vj,9:188,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{29:$VP,32:189,37:$Vx,38:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},{10:[1,190]},{25:[1,192],36:191,37:$Vh,38:$Vi},{10:[1,193]},{8:$Vj,9:194,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{11:[2,21]},{31:[1,195]},{29:$VP,32:196,37:$Vx,38:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},o($VX,[2,40]),{29:$VP,32:197},{10:[2,46]},{8:$Vj,9:198,24:$Vk,37:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt},{29:$VP,32:199},{27:[1,200],37:$Vx,38:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},o($Ve,[2,38]),o($VX,[2,39]),o($Ve,[2,44]),{10:[2,47],37:$Vx,38:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},o($Ve,[2,45]),{11:[2,20]}],
defaultActions: {29:[2,1],31:[2,2],40:[2,31],67:[2,26],108:[2,27],186:[2,21],191:[2,46],200:[2,20]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var Simbolos=new Map();
    var pilaCicl=[];
    var pilaFun=[];
    var consolita=""
    var consolita2=""

    const Entorno=function(anterior){
        return{
            Simbolos:new Map(),
            anterior:anterior
        }
    }

    var Global=Entorno(null)

    function NuevoSimbolo(valor,tipo){
        return{
            Valor:valor,
            Tipo:tipo
        }
    }

    function NuevaOp(Operandoizq,Operandoder,tipo){
        return{
            Opizq:Operandoizq,
            Opder:Operandoder,
            Tipo:tipo
        }
    }
    const Imprimir=function(Exp,tipo){

        return{
            Exp:Exp,
            TipoIns:tipo
        }

    }

    function OperaUna(Operandoizq,tipo){
        return{
            Opizq:Operandoizq,
            Opder:null,
            Tipo:tipo
        }
    }

    function EjectBloque(LINS,ent){
        var retu=null;
        for(var elemento of LINS){
       
            switch(elemento.TipoIns){
                case "imprimir":
                    var e=evaluar(elemento.Exp,ent);
                    console.log(e.Valor);
                    consolita+=String(e.Valor)+"\n"
                    console.log(consolita)
                    break;
                case "crear":
                   retu=ExecCrear(elemento,ent);
                    break;
                case "asignar":
                    retu=ExecAsign(elemento,ent);
                    break;
                case "SI":
                    retu=ExecSI(elemento,ent,ent)
                    break;
                case "switch":
                    retu=ExecSwitchi(elemento,ent)
                    break;
                case "while":
                    retu=ExecWhiles(elemento,ent)
                    break;
                case "for":
                    retu=ExecFores(elemento,ent)
                    break
                case "funcion":
                    retu=ExecFuncionar(elemento,Global)
                    break
                case "llamada":
                    retu=ExecLlamar(elemento,ent)
                    break
                case "return":
                    if(pilaFun.length>0){
                        retu=elemento.Exp
                    }else{
                        console.log("Instruccion return fuera de una funcion o metodo")
                    }
                    break
                case "break":
                    if(pilaCicl.length>0){
                    return elemento
                    }else{
                        console.log("Break fuera de un switch o ciclo detectado")
                    }
                    break;
            }
            if(retu){
                
                return retu
            }
        }
        
        return null
    }

    function evaluar(operacion,ent){
        var izq;
        var der;
        switch(operacion.Tipo){
            case "bool":
                return NuevoSimbolo(operacion.Valor,operacion.Tipo)
            
            case "String":
                return NuevoSimbolo(operacion.Valor,operacion.Tipo)
            case "int":
                return NuevoSimbolo(parseFloat(operacion.Valor),operacion.Tipo)
            case "double":
                return NuevoSimbolo(parseFloat(operacion.Valor),operacion.Tipo)
            case "ID":
            var temporal=ent
                while(temporal!=null){
                    if (temporal.Simbolos.has(operacion.Valor)){
                        var valorID=temporal.Simbolos.get(operacion.Valor)
                        return NuevoSimbolo(valorID.Valor,valorID.Tipo)
                    }
                    temporal=temporal.anterior
                }
                console.log("No existe la variable: "+operacion.Valor);
                return NuevoSimbolo("@error@","error");
            case "cambio":
                var result=ExecCambios(Cambios(operacion.Valor.Id,operacion.Valor.Tipo),ent)
                return result
            case "mayus":
                var result=ExecLetras(Letras(operacion.Valor.Id,operacion.Valor.Tipo),ent)
                return result
            case "funcion":
                var result=ExecLlamar(LLAMADA(operacion.Valor.Id,operacion.Valor.Param),ent)
                return result
            case "array":
                var temporal=ent
                while(temporal!=null){
                    if(temporal.Simbolos.has(operacion.Valor.Id)){
                        var val=temporal.Simbolos.get(operacion.Valor.Id)
                        if(operacion.Valor.Param.Tipo=="int" && operacion.Valor.Param.Valor>=0 &&operacion.Valor.Param.Valor<=(val.length-1)){
                            val=val[operacion.Valor.Param.Valor]
                            return NuevoSimbolo(val.Valor,val.Tipo)
                        }else{
                            console.log("La posicion: "+operacion.Valor.Param.Valor+" Se encuentra fuera del tamaño indicado anteriormente")
                            return NuevoSimbolo("@error@","error")
                        }
                    }
                    temporal=temporal.anterior
                }
                console.log("No existe el array"+operacion.Valor)
                return NuevoSimbolo("@error@","error")
                break
        }
        izq=evaluar(operacion.Opizq,ent)
        if (operacion.Opder!=null){
            der=evaluar(operacion.Opder,ent)

        }
        var retorno="error"
        switch (operacion.Tipo){
            case "+":
                switch(izq.Tipo){
                    case "int":
                        if(!der){
                            retorno="int"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="int"
                                 return NuevoSimbolo(izq.Valor+der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno);
                                break
                            case "bool":
                                retorno="int"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno); 
                                break
                            case "char":
                                retorno="int"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno); 
                                break
                            case "String":
                                retorno="String"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno);  
                                break
                        }
                    case "double":
                        if(!der){
                            retorno="double"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="double"
                                 return NuevoSimbolo(izq.Valor+der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno);
                                break
                            case "bool":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno); 
                                break
                            case "char":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno); 
                                break
                            case "String":
                                retorno="String"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno);  
                                break
                        }
                    case "bool":
                        if(!der){
                            retorno="bool"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="int"
                                 return NuevoSimbolo(izq.Valor+der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno);
                                break
                            case "String":
                                retorno="String"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno);  
                                break
                        }
                    case "char":
                        if(!der){
                            retorno="char"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="int"
                                 return NuevoSimbolo(izq.Valor+der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno);
                                break
                            case "char":
                                retorno="String"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno); 
                                break
                            case "String":
                                retorno="String"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno);  
                                break
                        }
                    case "String":
                        if(!der){
                            retorno="String"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="String"
                                 return NuevoSimbolo(izq.Valor+der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="String"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno);
                                break
                            case "bool":
                                retorno="String"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno); 
                                break
                            case "char":
                                retorno="String"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno); 
                                break
                            case "String":
                                retorno="String"
                                return NuevoSimbolo(izq.Valor+der.Valor,retorno);  
                                break
                        }
                }
                break;
            case "-":
                switch(izq.Tipo){
                    case "int":
                        if(!der){
                            retorno="int"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="int"
                                 return NuevoSimbolo(izq.Valor-der.Valor,retorno);
                                 break 
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor-der.Valor,retorno);
                                break
                            case "bool":
                                retorno="int"
                                return NuevoSimbolo(izq.Valor-der.Valor,retorno); 
                                break
                            case "char":
                                retorno="int"
                                return NuevoSimbolo(izq.Valor-der.Valor,retorno); 
                                break
                             
                        }
                    case "double":
                        if(!der){
                            retorno="double"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="double"
                                 return NuevoSimbolo(izq.Valor-der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor-der.Valor,retorno);
                                break
                            case "bool":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor-der.Valor,retorno); 
                                break
                            case "char":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor-der.Valor,retorno); 
                                break
                            
                        }
                    case "bool":
                        if(!der){
                            retorno="bool"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="int"
                                 return NuevoSimbolo(izq.Valor-der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor-der.Valor,retorno);
                                break
                            
                        }
                    case "char":
                        if(!der){
                            retorno="char"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="int"
                                 return NuevoSimbolo(izq.Valor-der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor-der.Valor,retorno);
                                break
                            
                        }
                }
                break;
            case "*":
                switch(izq.Tipo){
                    case "int":
                        if(!der){
                            retorno="int"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="int"
                                 return NuevoSimbolo(izq.Valor*der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor*der.Valor,retorno);
                                break
                            
                            case "char":
                                retorno="int"
                                return NuevoSimbolo(izq.Valor*der.Valor,retorno); 
                                break
                        }
                    case "double":
                        if(!der){
                            retorno="double"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="double"
                                 return NuevoSimbolo(izq.Valor*der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor*der.Valor,retorno);
                                break
                             
                            case "char":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor*der.Valor,retorno); 
                                break
                            
                        }
                    case "char":
                        if(!der){
                            retorno="char"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="int"
                                 return NuevoSimbolo(izq.Valor*der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor*der.Valor,retorno);
                                break
                             
                        }
                }
                break;
            case "/":
                switch(izq.Tipo){
                    case "int":
                        if(!der){
                            retorno="int"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="int"
                                 return NuevoSimbolo(izq.Valor/der.Valor,retorno);
                                 break 
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor/der.Valor,retorno);
                                break
                             
                            case "char":
                                retorno="int"
                                return NuevoSimbolo(izq.Valor/der.Valor,retorno); 
                                break
                             
                        }
                    case "double":
                        if(!der){
                            retorno="double"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="double"
                                 return NuevoSimbolo(izq.Valor/der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor/der.Valor,retorno);
                                break
                             
                            case "char":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor/der.Valor,retorno); 
                                break
                             
                        }
                    
                    case "char":
                        if(!der){
                            retorno="char"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="int"
                                 return NuevoSimbolo(izq.Valor/der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor/der.Valor,retorno);
                                break
                             
                        }
                    
                }
                break;
            case "umenos":
                switch(izq.Tipo){
                    case "int":
                        if(!der){
                            retorno="int"
                           return NuevoSimbolo(0-izq.Valor,retorno)
                            break
                        }
                        
                    case "double":
                        if(!der){
                            retorno="double"
                           return NuevoSimbolo(0-izq.Valor,retorno)
                            break
                        }
                }
                        
                    
                break;
            case "%":
                switch(izq.Tipo){
                    case "int":
                        if(!der){
                            retorno="int"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="int"
                                 return NuevoSimbolo(izq.Valor%der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor%der.Valor,retorno);
                                break 
                        }
                    case "double":
                        if(!der){
                            retorno="double"
                            break
                        }
                        switch(der.Tipo){
                            case "int":
                                retorno="double"
                                 return NuevoSimbolo(izq.Valor%der.Valor,retorno); 
                                 break
                            case "double":
                                retorno="double"
                                return NuevoSimbolo(izq.Valor%der.Valor,retorno);
                                break
                              
                        }
                }
                   
                break;
            case "not":
                return NuevoSimbolo(!izq.Valor,izq.Tipo);
                break;
            case "and":
                return NuevoSimbolo(izq.Valor&&der.Valor,izq.Tipo);
                break;
            case "or":
                return NuevoSimbolo(izq.Valor||der.Valor,izq.Tipo);
                break;
            case ">":
                return NuevoSimbolo(izq.Valor>der.Valor,"bool");
                break;
            case "<":
                return NuevoSimbolo(izq.Valor<der.Valor,"bool");
                break;
            case ">=":
                return NuevoSimbolo(izq.Valor>=der.Valor,"bool");
                break;
            case "<=":
                return NuevoSimbolo(izq.Valor<=der.Valor,"bool");
                break;
            case "==":
                return NuevoSimbolo(izq.Valor==der.Valor,"bool");
                break;
            case "!=":
                return NuevoSimbolo(izq.Valor!=der.Valor,"bool");
                break;
            
        }
    }

    const Creacion=function(ID,Tipo,Exp,Tipo2,Tam){
        return{
            Id:ID,
            Tipo:Tipo,
            Exp:Exp,
            Tipo2:Tipo2,
            Tamaño:Tam,
            TipoIns:"crear"
        }
    }

    function ExecCrear(Crear,ent){
        if(ent.Simbolos.has(Crear.Id)){
            console.log("La variable: "+Crear.Id+" ya existe en este ambito")
            return;
        }

        var  valor;
        
            if(Crear&& Crear.Exp){
                if(Crear.Tipo2){
                    if(Crear.Tipo==Crear.Tipo2){
                        Crear.Tipo2="array"
                        valor=[]
                        for(var array of Crear.Exp){
                            var val=evaluar(array,ent)
                            if(val.Tipo==Crear.Tipo){
                                valor.push(val)
                            }else{
                                console.log("Los datos ingresados no coinciden con el tipo del array")
                                return
                            }
                        }
                    }else{
                        console.log("Los tipos de datos no coindicen con el del array")
                        return
                    }
                    
                }else{
                valor=evaluar(Crear.Exp,ent);
                if(valor.Tipo!=Crear.Tipo){
                    console.log("El tipo no coincide con la variable a crear")
                }
                }
                
            }else{
                if(Crear.Tipo2){
                    if (Crear.Tipo==Crear.Tipo2){
                        Crear.Tipo2="array"
                        var numero=evaluar(Crear.Tamaño,ent)
                        valor=[]
                        var temporal="mientras"
                        
                        for(var tamano=0;tamano<numero.Valor;tamano++){
                            switch(Crear.Tipo){
                                case "int":
                                    temporal=NuevoSimbolo(0,"int")
                                    break;
                                case "double":
                                    temporal=NuevoSimbolo(0.0,"double")
                                    break;
                                case "char":
                                    temporal=NuevoSimbolo('\u0000',"char")
                                    break;
                                case "String":
                                    temporal=NuevoSimbolo("","String")
                                    break;
                            }
                            valor.push(temporal)

                        }
                    }else{
                        console.log("Los tipos de datos ingresados en el array no coinciden")
                        return
                    }
                }else{
                switch(Crear.Tipo){
                    case "int":
                        valor=NuevoSimbolo(0,"int");
                        break;
                    case "String":
                        valor=NuevoSimbolo("","String")
                        break;
                    case "double":
                        valor=NuevoSimbolo(0.0,"double")
                        break;

                    case "Boolean":
                        valor=NuevoSimbolo(false,"Boolean")
                        break;
                    case "char":
                        valor=NuevoSimbolo('',"char")
                        break;

                
                }
                }
            }
            
        
        
            
        
        ent.Simbolos.set(Crear.Id,valor)
        
    }

    const Asign=function(id,Exp,Exp2){
        return{
            Id:id,
            Exp:Exp,
            TipoIns:"asignar",
            Exp2:Exp2
        }
    }

    const ExecAsign=function(asignar,ent){
        var val=evaluar(asignar.Exp,ent)
        var temporal=ent
        while(temporal!=null){
            if(temporal.Simbolos.has(asignar.Id)){
                var simbol=temporal.Simbolos.get(asignar.Id);
                if (simbol.Tipo=="double" && val.Tipo=="int"){
                    val.Tipo="double"
                }
                if (simbol.Tipo=="int"&& val.Tipo!="int"){
                    console.log("No son del mismo tipo: ",simbol.Tipo," double")
                    return
                }
                if(val.Tipo=="char"){
                    if(val.Valor.length!=0){
                        console.log("No se puede ingresar: "+val.Valor+" tipo de dato no compatible con char")
                        return
                    }
                }
                if(simbol.Tipo===val.Tipo){
                    temporal.Simbolos.set(asignar.Id,val);
                    return
                }else{
                    console.log("Tipos incompatibles: ",simbol.Tipo,",",val.Tipo)
                    return
                }
                
            }
            temporal=temporal.anterior
            
        }
        console.log("No se encontro la variable: ",asignar.Id)


    }

    const SI=function(Exp,AreaSi,AreaSiNo){
        return{
            Exp:Exp,
            AreaSi:AreaSi,
            AreaSiNo:AreaSiNo,
            TipoIns:"SI"
        }
    }

    function ExecSI(SI,ent){
        var cond=evaluar(SI.Exp,ent)
        if (cond.Tipo="bool"){
            if(cond.Valor){
                var nuevo=Entorno(ent)
                return EjectBloque(SI.AreaSi,nuevo)
            }else if(SI.AreaSiNo!=null){
                var nuevo=Entorno(ent)
                return EjectBloque(SI.AreaSiNo,nuevo)
            }
        }else{
            console.log("Se esperab una condicion dentro del if")
        }
    }

    const SWITCHI=function(Exp, Lcases,Default){
        return{
            Exp:Exp,
            Lcases:Lcases,
            Default:Default,
            TipoIns:"switch"
        }
    }

    const Cases=function(Exp,Area){
        return{
            Exp:Exp,
            Area:Area,
        }
    }

    function ExecSwitchi(Switchi,ent){
        pilaCicl.push("switch")
        var eject=false
        var nuevito=Entorno(ent)
        for(var cas of Switchi.Lcases){
            var cond=evaluar(NuevaOp(Switchi.Exp,cas.Exp,"=="),ent);
            if (cond.Tipo=="bool"){
                if(cond.Valor){
                   
                    var result=EjectBloque(cas.Area,nuevito)
                    if(result && result.TipoIns=="break"){
                        pilaCicl.pop()
                        return
                    }else if(res){
                        pilaCicl.pop()
                        return result
                    }
                }
            }else{
                pilaCicl.pop()
                return
            }
        }
        if (Switchi.Default && eject==false){
            var result=EjectBloque(Switchi.Default,nuevito);
        }
        pilaCicl.pop()
        return 
    }

    const ROMPER=function(){
        return{
            TipoIns:"break"
        }
    }

    const WHILES=function(Exp,Area){
        return{
            Exp:Exp,
            Area:Area,
            TipoIns:"while"
        }
    }

    function ExecWhiles(Whiles,ent){
        pilaCicl.push("while");
        
        while(true){
            nuevito=Entorno(ent)
            var result=evaluar(Whiles.Exp,ent)
            if(result.Tipo=="bool"){
                if(result.Valor){
                    var eject=EjectBloque(Whiles.Area,nuevito);
                    if (eject && eject.TipoIns=="break"){
                        break
                    }else if(eject){
                        pilaCicl.pop()
                        return eject
                    }
                }else{
                    break
                }
            }else{
                console.log("Se esperaba una condicion dentro del ciclo while")
                pilaCicl.pop();
                return
            }
        }
    }

    const FORES=function(Expinicio,Expfin,Expavance,Area){
        return{
            Expinicio:Expinicio,
            Expfin:Expfin,
            Expavance:Expavance,
            Area:Area,
            TipoIns:"for"
        }
    }

    function ExecFores(desde,ent){
        pilaCicl.push("for")
        var nuevito=Entorno(ent)
        if(desde.Expinicio.TipoIns=="crear"){
            ExecCrear(desde.Expinicio,nuevito)
        }else{
            ExecAsign(desde.Expinicio,nuevito)
        }
        while(true){
            var cond=evaluar(desde.Expfin,nuevito)
            if(!cond.Valor){
                pilaCicl.pop();
                return;
            }
            var nue=Entorno(nuevito)
            var result=EjectBloque(desde.Area,nue)
            if (result && result.TipoIns=="break"){
                break
            }else if(result){
                pilaCicl.pop()
                return result
            }
            if(desde.Expavance.Exp.Opder){
            ExecAsign(Asign(desde.Expavance.Id,NuevaOp(desde.Expavance.Exp.Opizq,desde.Expavance.Exp.Opder,desde.Expavance.Exp.Tipo)),nuevito)
            }
        }
        pilaCicl.pop();
        return
    }
    const RETORNAR=function(Exp){
        return{
            Exp:Exp,
            TipoIns:"return"
        }
    }

    const FUNCIONAR=function(id,param,tipo,area){
        return{
            id:id,
            Param:param,
            Tipo:tipo,
            Area:area,
            TipoIns:"funcion"
        }
    }

    function ExecFuncionar(elem,ent){
        var name=elem.id+"$"
        if(ent.Simbolos.has(name)){
            console.log("La funcion: ",elem.id," ya ha sido declarada anteriormente")
            return;
        }
        ent.Simbolos.set(name,elem)
    }

    const LLAMADA=function(id,param){
        return{
            Id:id,
            Param:param,
            TipoIns:"llamada"
        }
    }

    function ExecLlamar(llamada,ent){
        var name=llamada.Id+"$"
        var resul=[]
        for(var params of llamada.Param){
            var val=evaluar(params,ent)
           
            resul.push(val)
        }
        var temporal=ent
        var simbol=null
        while(temporal!=null){
            if(temporal.Simbolos.has(name)){
                simbol=temporal.Simbolos.get(name)
                break
            }
            temporal=temporal.anterior
        }
        if(!simbol){
            console.log("No se encontro la funcion: ",llamada.Id," con los parametros indicados")
            return NuevoSimbolo("@error@","error")
        }
        pilaFun.push(llamada.Id)
        var nuevito=Entorno(Global)
        var indice=0
        for(var creacion of simbol.Param){
            creacion.Exp=resul[indice]
            ExecCrear(creacion,nuevito)
            indice++
        }
        var retorno=NuevoSimbolo("@error@","error")
        var result=EjectBloque(simbol.Area,nuevito)
        if(result){
            if(result.Tipo=="void"){
                if(simbol.Tipo!="void"){
                console.log("No se espera un retorno")
                
                }else{
                retorno=NuevoSimbolo("@vacio@","vacio")

                }
            }else{
                var expresion=evaluar(result,nuevito)
                if(expresion.Tipo!=simbol.Tipo){
                    console.log("El tipo a retornar no coindice con el indicado")
                    retorno=NuevoSimbolo("@error@","error")
                }else{
                    retorno=expresion
                }
            }
        }else{
            if(simbol.Tipo!="void"){
                console.log("Se espera algo a retornar")
                retorno=NuevoSimbolo("@error@","error")

            }else{
                retorno=NuevoSimbolo("@vacio@","vacio")
            }
        }
        pilaFun.pop()
        return retorno
    }

    const Incrementos=function(id,Exp){
        return{
            
            Id:id,
            Exp:Exp

        }

    }

    const Cambios=function(val,Tipo){
        return{
            Valor:val,
            Tipo:Tipo,
            TipoIns:"cambio"
        }
    }

    function ExecCambios(cambio,ent){
        switch(cambio.Valor.Tipo){
            case "int":
                switch(cambio.Tipo){
                    case "double":
                        return NuevoSimbolo(cambio.Valor.Valor,"double")
                        break
                    case "char":
                        var nuevo=String.fromCharCode(cambio.Valor.Valor)+"";
                        return NuevoSimbolo(nuevo,"char")
                        break
                    case "String":
                        return NuevoSimbolo(cambio.Valor.Valor+"","String")
                        break
                    default:
                        console.log("Tipo de dato incorrecto")
                        return NuevoSimbolo("@error@","error")
                    
                }
            case "double":
                switch(cambio.Tipo){
                    case "int":
                        var nuevo=Math.trunc(cambio.Valor.Valor)
                        return NuevoSimbolo(nuevo,"int")
                        break
                    case "String":
                        return NuevoSimbolo(cambio.Valor.Valor+"","String")
                        break
                    default:
                        console.log("Tipo de dato incorrecto")
                        return NuevoSimbolo("@error@","error")
                    
                }
            case "char":
                switch(cambio.Tipo){
                    case "int":
                        var nuevo=cambio.Valor.Valor.charCodeAt(0)
                        return NuevoSimbolo(nuevo,"int")
                        break
                    case "double":
                        var nuevo=cambio.Valor.Valor.charCodeAt(0)
                        return NuevoSimbolo(nuevo,"double")
                        break
                    default:
                        console.log("Tipo de dato incorrecto")
                        return NuevoSimbolo("@error@","error")
                    
                }
            case "ID":
                var esta=false
                var temporal=ent
                while(temporal!=null){
                    if(temporal.Simbolos.has(cambio.Valor.Valor+"")){
                        var val=temporal.Simbolos.get(cambio.Valor.Valor)
                        var cambiesito=Cambios(val,cambio.Tipo)
                        return ExecCambios(cambiesito,ent)
                    }
                    temp=temp.anterior
                }
                if(!esta){
                    console.log("No se detecto la variable")
                    return NuevoSimbolo("@error@","error")
                }
            
                    
                
        }
    }

    const Letras=function(val,Tipo){
        return{
            Valor:val,
            Tipo:Tipo,
            TipoIns:"mayus"
        }
    }

    function ExecLetras(mayus,ent){
        switch(mayus.Tipo){
            case "String":
                switch(mayus.Valor.Tipo){
                    case "double":
                        return NuevoSimbolo(mayus.Valor.Valor+"","String")
                    case "ID":
                        var temporal=ent
                        var esta=false
                        while(temporal!=null){
                            if(temporal.Simbolos.has(mayus.Valor.Valor+"")){
                                var val=temporal.Simbolos.get(mayus.Valor.Valor)
                                var camb=Letras(val,"String")
                                return ExecLetras(camb,ent)
                            }
                            temporal=temporal.anterior
                        }
                        if(!esta){
                            console.log("No se encontro la variable deseada")
                            return NuevoSimbolo("@error@","error")
                        }
                    case "bool":
                        return NuevoSimbolo(mayus.Valor.Valor+"","String")
                    case "int":
                        return NuevoSimbolo(mayus.Valor.Valor+"","String")
                    default:
                        console.log("Tipo no definido")
                        return NuevoSimbolo("@error@","error")
                }
            case "upper":
            if(mayus.Valor.Tipo=="ID"){
                    var temporal=ent
                    var esta=false
                    while(temporal!=null){
                        if(temporal.Simbolos.has(mayus.Valor.Valor+"")){
                            var val=temporal.Simbolos.get(mayus.Valor.Valor)
                            var camb=Letras(val,"upper")
                            return ExecLetras(camb,ent)
                        }
                        temporal=temporal.anterior
                    }
                    if(!esta){
                        console.log("No se encontro la variable")
                        return NuevoSimbolo("@error@","error")
                    }
                }
                if(mayus.Valor.Tipo=="String"){
                    var val=mayus.Valor.Valor.toUpperCase()
                    return NuevoSimbolo(val,"String")
                }else{
                    console.log("Error en la accion Upper")
                    return NuevoSimbolo("@error@","error")
                }
            case "lower":
                if(mayus.Valor.Tipo=="ID"){
                    var temporal=ent
                    var esta=false
                    while(temporal!=null){
                        if(temporal.Simbolos.has(mayus.Valor.Valor+"")){
                            var val=temporal.Simbolos.get(mayus.Valor.Valor)
                            var camb=Letras(val,"lower")
                            return ExecLetras(camb,ent)
                        }
                        temporal=temporal.anterior
                    }
                    if(!esta){
                        console.log("No se encontro la variable")
                        return NuevoSimbolo("@error@","error")
                    }
                }
                if(mayus.Valor.Tipo=="String"){
                    var baj=mayus.Valor.Valor.toLowerCase()
                    return NuevoSimbolo(baj,"String")
                }else{
                    console.log("Error en la accion Lower")
                    return NuevoSimbolo("@error@","error")
                }

        }
    }
    

    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:return "int";
break;
case 4:return "Double";
break;
case 5:return "Boolean";
break;
case 6:return "Char";
break;
case 7:return "String";
break;
case 8:return "RBREAK";
break;
case 9:return "Rif";
break;
case 10:return "Relse";
break;
case 11:return "RSWITCH"
break;
case 12:return "RCASE"
break;
case 13:return "RDEFAULT"
break;
case 14:return "RWHILE"
break;
case 15:return "RFOR"
break;
case 16:return "RFUNCION"
break;
case 17:return "RVOID"
break;
case 18:return "RRETURN"
break;
case 19:return "RTOLOWER"
break;
case 20:return "RTOUPPER"
break;
case 21:return "NUEVO"
break;
case 22:
break;
case 23:return "IMPRIMIR";
break;
case 24:return "PTCOMA";
break;
case 25:return "COMITA"
break;
case 26:return "PARABRE";
break;
case 27:return "PARCIERRA";
break;
case 28:return "TRUE";
break;
case 29:return "FALSE";
break;
case 30:return "MAYORIG";
break;
case 31:return "MENORIG";
break;
case 32:return "IGUALACION";
break;
case 33:return "DIFERENTE";
break;
case 34:return "IGUAL";
break;
case 35:return "MAS";
break;
case 36:return "MENOS";
break;
case 37:return "POR";
break;
case 38:return "DIV";
break;
case 39:return "MODULO";
break;
case 40:return "MAYOR";
break;
case 41:return "MENOR";
break;
case 42:return "AND";
break;
case 43:return "OR";
break;
case 44:return "NOT";
break;
case 45:return "LABRE";
break;
case 46:return "LCIERRA";
break;
case 47:return "DPUNTOS"
break;
case 48:return "CORABRE"
break;
case 49:return "CORCIERRA"
break;
case 50:return "DECIMAL"
break;
case 51:return "NUMERO"
break;
case 52:return "ID"
break;
case 53:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return "Cadena"
break;
case 54:return 5;
break;
case 55:console.log("El simbolo "+yy_.yytext+" no se reconoce")
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[ \t\r]+)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:Boolean\b)/i,/^(?:char\b)/i,/^(?:String\b)/i,/^(?:break\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:Default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:funcion\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:new\b)/i,/^(?:\n)/i,/^(?:imprimir\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>)/i,/^(?:<)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\{)/i,/^(?:\})/i,/^(?::)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[0-9]+(\.[0-9]+)+\b)/i,/^(?:[0-9]+\b)/i,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/i,/^(?:"((\\")|[^\n\"])*")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = inicio;
exports.Parser = inicio.Parser;
exports.parse = function () { return inicio.parse.apply(inicio, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}